
@model SurveyApp.WebMvc.Models.RequirementDetailViewModel
@{
    ViewData["Title"] = "Requirement Details";
    var isAdmin = User.IsInRole("Admin");
}

<div class="w-full px-4 sm:px-6 lg:px-8 py-10">
    <div class="w-full max-w-[900px] mx-auto bg-white p-6 rounded-lg shadow-sm">
        <div class="mb-6">
            <a href="@Url.Action("Index")" class="text-primary hover:text-primary/80 flex items-center gap-1">
                <i class="fas fa-arrow-left"></i> Back to Requirements
            </a>
        </div>
        
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success mb-4 p-4 bg-green-100 text-green-800 rounded-md">
                @TempData["SuccessMessage"]
            </div>
        }
        
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger mb-4 p-4 bg-red-100 text-red-800 rounded-md">
                @TempData["ErrorMessage"]
            </div>
        }
        
        <div class="mb-6">
            <h1 class="text-2xl font-bold mb-1">@Model.Requirement.Title</h1>
            <div class="flex flex-wrap gap-2 mb-2">
                @{
                    string statusClass = "bg-gray-100 text-gray-800";
                    switch (Model.Requirement.Status?.ToLower())
                    {
                        case "proposed":
                            statusClass = "bg-blue-100 text-blue-800";
                            break;
                        case "in-progress":
                        case "in progress":
                            statusClass = "bg-yellow-100 text-yellow-800";
                            break;
                        case "implemented":
                            statusClass = "bg-green-100 text-green-800";
                            break;
                        case "rejected":
                            statusClass = "bg-red-100 text-red-800";
                            break;
                    }
                    
                    string priorityClass = "bg-gray-100 text-gray-800";
                    if (!string.IsNullOrEmpty(Model.Requirement.Priority))
                    {
                        switch (Model.Requirement.Priority.ToLower())
                        {
                            case "critical":
                                priorityClass = "bg-red-100 text-red-800";
                                break;
                            case "high":
                                priorityClass = "bg-orange-100 text-orange-800";
                                break;
                            case "medium":
                                priorityClass = "bg-blue-100 text-blue-800";
                                break;
                            case "low":
                                priorityClass = "bg-green-100 text-green-800";
                                break;
                        }
                    }
                }
                
                <span class="px-2 py-1 rounded-full text-xs font-medium @statusClass">
                    @(Model.Requirement.Status == "in-progress" ? "In Progress" : (Model.Requirement.Status?.FirstCharToUpper() ?? "Unknown"))
                </span>
                
                @if (!string.IsNullOrEmpty(Model.Requirement.Priority))
                {
                    <span class="px-2 py-1 rounded-full text-xs font-medium @priorityClass">
                        @Model.Requirement.Priority.FirstCharToUpper()
                    </span>
                }
                
                @if (!string.IsNullOrEmpty(Model.Requirement.Category))
                {
                    <span class="px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                        @Model.Requirement.Category
                    </span>
                }
                
                @if (!string.IsNullOrEmpty(Model.Requirement.ProjectArea))
                {
                    <span class="px-2 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                        @Model.Requirement.ProjectArea
                    </span>
                }
            </div>
            
            <div class="text-sm text-muted-foreground flex flex-wrap gap-x-4 gap-y-1 mb-4">
                <span>Created: @Model.Requirement.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</span>
                @if (Model.Requirement.UpdatedAt.HasValue)
                {
                    <span>Updated: @Model.Requirement.UpdatedAt.Value.ToLocalTime().ToString("MMM dd, yyyy HH:mm")</span>
                }
                <span>By: @(Model.Requirement.IsAnonymous ? "Anonymous" : Model.Requirement.CustomerName)</span>
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="md:col-span-2">
                <div class="card border rounded-lg p-4 h-full">
                    <h3 class="font-semibold mb-2">Description</h3>
                    <p class="whitespace-pre-line text-sm">@Model.Requirement.Description</p>
                </div>
            </div>
            
            <div>
                <div class="card border rounded-lg p-4 h-full">
                    <h3 class="font-semibold mb-2">Requirement Details</h3>
                    
                    <div class="space-y-2 text-sm">
                        @if (Model.Requirement.CompletionPercentage > 0)
                        {
                            <div>
                                <p class="mb-1">Progress: @Model.Requirement.CompletionPercentage%</p>
                                <div class="w-full h-1.5 bg-muted rounded-full overflow-hidden">
                                    <div class="h-full bg-primary rounded-full" style="width: @(Model.Requirement.CompletionPercentage)%"></div>
                                </div>
                            </div>
                        }
                        
                        @if (Model.Requirement.TargetDate.HasValue)
                        {
                            <div>
                                <p class="font-medium">Target Date:</p>
                                <p>@Model.Requirement.TargetDate.Value.ToShortDateString()</p>
                            </div>
                        }
                        
                        @if (!Model.Requirement.IsAnonymous)
                        {
                            <div>
                                <p class="font-medium">Submitted By:</p>
                                <p>@Model.Requirement.CustomerName</p>
                                <p><a href="mailto:@Model.Requirement.CustomerEmail" class="text-primary hover:underline">@Model.Requirement.CustomerEmail</a></p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        @if (!string.IsNullOrEmpty(Model.Requirement.AcceptanceCriteria))
        {
            <div class="card border rounded-lg p-4 mb-8">
                <h3 class="font-semibold mb-2">Acceptance Criteria</h3>
                <div class="whitespace-pre-line text-sm">@Model.Requirement.AcceptanceCriteria</div>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(Model.Requirement.Response))
        {
            <div class="card border rounded-lg p-4 mb-8">
                <h3 class="font-semibold mb-2">Response</h3>
                <div class="whitespace-pre-line text-sm">@Model.Requirement.Response</div>
                @if (Model.Requirement.ResponseDate.HasValue)
                {
                    <p class="text-xs text-muted-foreground mt-2">
                        Response provided on @Model.Requirement.ResponseDate.Value.ToLocalTime().ToString("MMM dd, yyyy HH:mm")
                    </p>
                }
            </div>
        }
        
        @if (isAdmin)
        {
            <div class="card border rounded-lg p-4">
                <h3 class="font-semibold mb-4">Admin Actions</h3>
                
                <form asp-action="UpdateStatus" method="post" class="space-y-4">
                    <input type="hidden" name="id" value="@Model.Requirement.Id" />
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="status" class="text-sm font-medium">Status</label>
                            <select id="status" name="status" class="form-select w-full rounded-md border">
                                <option value="proposed" @(Model.Requirement.Status?.ToLower() == "proposed" ? "selected" : "")>Proposed</option>
                                <option value="in-progress" @(Model.Requirement.Status?.ToLower() == "in-progress" ? "selected" : "")>In Progress</option>
                                <option value="implemented" @(Model.Requirement.Status?.ToLower() == "implemented" ? "selected" : "")>Implemented</option>
                                <option value="rejected" @(Model.Requirement.Status?.ToLower() == "rejected" ? "selected" : "")>Rejected</option>
                            </select>
                        </div>
                        
                        <div class="space-y-2">
                            <label for="completionPercentage" class="text-sm font-medium">Completion Percentage</label>
                            <input type="number" id="completionPercentage" name="completionPercentage" 
                                   min="0" max="100" value="@Model.Requirement.CompletionPercentage" 
                                   class="form-input w-full rounded-md border" />
                        </div>
                    </div>
                    
                    <div class="space-y-2">
                        <label for="response" class="text-sm font-medium">Response</label>
                        <textarea id="response" name="response" rows="4" 
                                  class="form-textarea w-full rounded-md border">@Model.Requirement.Response</textarea>
                    </div>
                    
                    <div class="flex justify-end space-x-2">
                        <button type="submit" class="btn btn-primary">Update Status</button>
                    </div>
                </form>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Add focus styles
            $('.form-input, .form-select, .form-textarea').focus(function() {
                $(this).addClass('ring-2 ring-primary ring-opacity-50');
            }).blur(function() {
                $(this).removeClass('ring-2 ring-primary ring-opacity-50');
            });
            
            // Update completion percentage based on status
            $('#status').change(function() {
                var status = $(this).val();
                var currentPercentage = parseInt($('#completionPercentage').val());
                
                if (status === 'implemented' && currentPercentage < 100) {
                    $('#completionPercentage').val(100);
                } else if (status === 'proposed' && currentPercentage > 0) {
                    $('#completionPercentage').val(0);
                } else if (status === 'rejected') {
                    $('#completionPercentage').val(0);
                }
            });
        });
    </script>
}
