
@model SurveyApp.WebMvc.Models.RequirementReportsViewModel
@{
    ViewData["Title"] = "Requirements Reports";
}

<div class="w-full px-4 sm:px-6 lg:px-8 py-10">
    <div class="w-full max-w-[1000px] mx-auto bg-white p-6">
        <div class="mb-6">
            <a href="@Url.Action("Index")" class="text-primary hover:text-primary/80 flex items-center gap-1">
                <i class="fas fa-arrow-left"></i> Back to Requirements
            </a>
        </div>
        
        <div class="mb-8">
            <h1 class="text-3xl font-bold tracking-tight sm:text-4xl mb-2">Requirements Reports</h1>
            <p class="text-muted-foreground">
                Comprehensive analytics and insights into project requirements
            </p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
            <div class="card border rounded-lg p-6">
                <div class="flex flex-col items-center justify-center">
                    <div class="rounded-full bg-primary/10 p-3 mb-3">
                        <i class="fas fa-clipboard-list text-primary"></i>
                    </div>
                    <div class="text-2xl font-bold">@Model.TotalRequirements</div>
                    <p class="text-sm text-muted-foreground">Total Requirements</p>
                </div>
            </div>
            
            <div class="card border rounded-lg p-6">
                <div class="flex flex-col items-center justify-center">
                    <div class="rounded-full bg-blue-100 p-3 mb-3">
                        <i class="fas fa-lightbulb text-blue-500"></i>
                    </div>
                    <div class="text-2xl font-bold">@Model.ProposedRequirements</div>
                    <p class="text-sm text-muted-foreground">Proposed</p>
                </div>
            </div>
            
            <div class="card border rounded-lg p-6">
                <div class="flex flex-col items-center justify-center">
                    <div class="rounded-full bg-yellow-100 p-3 mb-3">
                        <i class="fas fa-clock text-yellow-500"></i>
                    </div>
                    <div class="text-2xl font-bold">@Model.InProgressRequirements</div>
                    <p class="text-sm text-muted-foreground">In Progress</p>
                </div>
            </div>
            
            <div class="card border rounded-lg p-6">
                <div class="flex flex-col items-center justify-center">
                    <div class="rounded-full bg-green-100 p-3 mb-3">
                        <i class="fas fa-check-circle text-green-500"></i>
                    </div>
                    <div class="text-2xl font-bold">@Model.ImplementedRequirements</div>
                    <p class="text-sm text-muted-foreground">Implemented</p>
                </div>
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="card border rounded-lg">
                <div class="card-header p-4 border-b">
                    <h3 class="font-semibold flex items-center gap-2">
                        <i class="fas fa-chart-pie"></i> Requirements by Status
                    </h3>
                </div>
                <div class="card-content p-4">
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                                <span>Proposed</span>
                            </div>
                            <span>@Model.ProposedRequirements (@Math.Round((double)Model.ProposedRequirements / Model.TotalRequirements * 100)%)</span>
                        </div>
                        <div class="h-2 bg-gray-100 rounded-full overflow-hidden">
                            <div class="h-full bg-blue-500 rounded-full" style="width: @Math.Round((double)Model.ProposedRequirements / Model.TotalRequirements * 100)%"></div>
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                                <span>In Progress</span>
                            </div>
                            <span>@Model.InProgressRequirements (@Math.Round((double)Model.InProgressRequirements / Model.TotalRequirements * 100)%)</span>
                        </div>
                        <div class="h-2 bg-gray-100 rounded-full overflow-hidden">
                            <div class="h-full bg-yellow-500 rounded-full" style="width: @Math.Round((double)Model.InProgressRequirements / Model.TotalRequirements * 100)%"></div>
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                                <span>Implemented</span>
                            </div>
                            <span>@Model.ImplementedRequirements (@Math.Round((double)Model.ImplementedRequirements / Model.TotalRequirements * 100)%)</span>
                        </div>
                        <div class="h-2 bg-gray-100 rounded-full overflow-hidden">
                            <div class="h-full bg-green-500 rounded-full" style="width: @Math.Round((double)Model.ImplementedRequirements / Model.TotalRequirements * 100)%"></div>
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                                <span>Rejected</span>
                            </div>
                            <span>@Model.RejectedRequirements (@Math.Round((double)Model.RejectedRequirements / Model.TotalRequirements * 100)%)</span>
                        </div>
                        <div class="h-2 bg-gray-100 rounded-full overflow-hidden">
                            <div class="h-full bg-red-500 rounded-full" style="width: @Math.Round((double)Model.RejectedRequirements / Model.TotalRequirements * 100)%"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card border rounded-lg">
                <div class="card-header p-4 border-b">
                    <h3 class="font-semibold flex items-center gap-2">
                        <i class="fas fa-chart-bar"></i> Requirements by Category
                    </h3>
                </div>
                <div class="card-content p-4">
                    @if (Model.CategoryDistribution != null && Model.CategoryDistribution.Any())
                    {
                        <div class="space-y-4">
                            @foreach (var category in Model.CategoryDistribution)
                            {
                                <div class="flex items-center justify-between">
                                    <span>@category.Key</span>
                                    <span>@category.Value (@Math.Round((double)category.Value / Model.TotalRequirements * 100)%)</span>
                                </div>
                                <div class="h-2 bg-gray-100 rounded-full overflow-hidden">
                                    <div class="h-full bg-purple-500 rounded-full" style="width: @Math.Round((double)category.Value / Model.TotalRequirements * 100)%"></div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-center py-4 text-muted-foreground">No category data available</p>
                    }
                </div>
            </div>
        </div>
        
        <div class="card border rounded-lg mb-8">
            <div class="card-header p-4 border-b">
                <h3 class="font-semibold flex items-center gap-2">
                    <i class="fas fa-chart-line"></i> Monthly Requirements Trends
                </h3>
            </div>
            <div class="card-content p-4">
                @if (Model.MonthlyRequirements != null && Model.MonthlyRequirements.Any())
                {
                    <div class="h-64 flex items-end justify-between gap-2">
                        @{
                            var maxCount = Model.MonthlyRequirements.Values.Max();
                        }
                        
                        @foreach (var month in Model.MonthlyRequirements.OrderBy(m => m.Key))
                        {
                            var percentage = maxCount > 0 ? (month.Value * 100) / maxCount : 0;
                            <div class="flex flex-col items-center">
                                <div class="w-16 bg-primary/80 hover:bg-primary transition-colors rounded-t" 
                                     style="height: @(percentage)%">
                                </div>
                                <div class="mt-2 text-xs text-center w-16 truncate" title="@month.Key">@month.Key</div>
                                <div class="text-xs font-medium">@month.Value</div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-center py-4 text-muted-foreground">No monthly data available</p>
                }
            </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="card border rounded-lg">
                <div class="card-header p-4 border-b">
                    <h3 class="font-semibold flex items-center gap-2">
                        <i class="fas fa-flag"></i> Requirements by Priority
                    </h3>
                </div>
                <div class="card-content p-4">
                    @if (Model.PriorityDistribution != null && Model.PriorityDistribution.Any())
                    {
                        <div class="space-y-4">
                            @foreach (var priority in new[] { "Critical", "High", "Medium", "Low" })
                            {
                                @if (Model.PriorityDistribution.ContainsKey(priority))
                                {
                                    var value = Model.PriorityDistribution[priority];
                                    var percentage = Math.Round((double)value / Model.TotalRequirements * 100);
                                    
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center">
                                            @{
                                                var colorClass = "bg-green-500";
                                                switch (priority.ToLower())
                                                {
                                                    case "critical":
                                                        colorClass = "bg-red-500";
                                                        break;
                                                    case "high":
                                                        colorClass = "bg-orange-500";
                                                        break;
                                                    case "medium":
                                                        colorClass = "bg-blue-500";
                                                        break;
                                                }
                                            }
                                            <div class="w-3 h-3 rounded-full @colorClass mr-2"></div>
                                            <span>@priority</span>
                                        </div>
                                        <span>@value (@percentage%)</span>
                                    </div>
                                    <div class="h-2 bg-gray-100 rounded-full overflow-hidden">
                                        <div class="h-full @(colorClass.Replace("bg-", "bg-")) rounded-full" style="width: @percentage%"></div>
                                    </div>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-center py-4 text-muted-foreground">No priority data available</p>
                    }
                </div>
            </div>
            
            <div class="card border rounded-lg">
                <div class="card-header p-4 border-b">
                    <h3 class="font-semibold flex items-center gap-2">
                        <i class="fas fa-project-diagram"></i> Requirements by Project Area
                    </h3>
                </div>
                <div class="card-content p-4">
                    @if (Model.ProjectAreaDistribution != null && Model.ProjectAreaDistribution.Any())
                    {
                        <div class="space-y-4">
                            @foreach (var area in Model.ProjectAreaDistribution)
                            {
                                <div class="flex items-center justify-between">
                                    <span>@area.Key</span>
                                    <span>@area.Value (@Math.Round((double)area.Value / Model.TotalRequirements * 100)%)</span>
                                </div>
                                <div class="h-2 bg-gray-100 rounded-full overflow-hidden">
                                    <div class="h-full bg-teal-500 rounded-full" style="width: @Math.Round((double)area.Value / Model.TotalRequirements * 100)%"></div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-center py-4 text-muted-foreground">No project area data available</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
