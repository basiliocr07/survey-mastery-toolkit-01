
@model SurveyApp.WebMvc.Models.AnalyticsViewModel
@{
    ViewData["Title"] = "Analytics Dashboard";
}

<div class="w-full px-4 sm:px-6 lg:px-8 pb-10">
    <div class="w-full max-w-[900px] mx-auto bg-white p-6">
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold tracking-tight sm:text-4xl mb-2">Analytics Dashboard</h1>
                <p class="text-muted-foreground">
                    Get insights into your surveys and customer engagement
                </p>
            </div>
            
            <div class="flex space-x-2">
                <button type="button" class="btn btn-outline btn-sm">
                    <i class="fas fa-calendar-alt mr-2"></i>Last 30 Days
                </button>
                <button type="button" class="btn btn-primary btn-sm">
                    <i class="fas fa-download mr-2"></i>Export
                </button>
            </div>
        </div>
        
        <!-- Key Metrics -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
            <div class="card p-4">
                <div class="text-muted-foreground text-sm mb-1">Total Surveys</div>
                <div class="text-2xl font-bold">@Model.TotalSurveys</div>
                <div class="text-xs text-green-600 mt-1">
                    <i class="fas fa-arrow-up"></i> @Model.SurveyGrowthRate%
                </div>
            </div>
            
            <div class="card p-4">
                <div class="text-muted-foreground text-sm mb-1">Total Responses</div>
                <div class="text-2xl font-bold">@Model.TotalResponses</div>
                <div class="text-xs text-green-600 mt-1">
                    <i class="fas fa-arrow-up"></i> @Model.ResponseGrowthRate%
                </div>
            </div>
            
            <div class="card p-4">
                <div class="text-muted-foreground text-sm mb-1">Avg. Completion Rate</div>
                <div class="text-2xl font-bold">@Model.AvgCompletionRate%</div>
                <div class="text-xs @(Model.CompletionRateChange >= 0 ? "text-green-600" : "text-red-600") mt-1">
                    <i class="fas fa-arrow-@(Model.CompletionRateChange >= 0 ? "up" : "down")"></i> @Math.Abs(Model.CompletionRateChange)%
                </div>
            </div>
            
            <div class="card p-4">
                <div class="text-muted-foreground text-sm mb-1">Avg. Response Time</div>
                <div class="text-2xl font-bold">@Model.AvgResponseTime min</div>
                <div class="text-xs @(Model.ResponseTimeChange <= 0 ? "text-green-600" : "text-red-600") mt-1">
                    <i class="fas fa-arrow-@(Model.ResponseTimeChange <= 0 ? "down" : "up")"></i> @Math.Abs(Model.ResponseTimeChange)%
                </div>
            </div>
        </div>
        
        <!-- Response Trends Chart -->
        <div class="card p-6 mb-8">
            <h2 class="text-xl font-bold mb-4">Response Trends</h2>
            <div class="w-full h-[300px]" id="responseTrendsChart">
                <!-- Chart will be rendered here -->
                <div class="flex items-center justify-center h-full">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                </div>
            </div>
        </div>
        
        <!-- Survey Performance Table -->
        <div class="card mb-8">
            <div class="px-6 py-4 border-b">
                <h2 class="text-xl font-bold">Survey Performance</h2>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-border">
                    <thead class="bg-accent/30">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Survey</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Responses</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Completion Rate</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Avg. Time</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @if (Model.SurveyPerformance != null && Model.SurveyPerformance.Any())
                        {
                            @foreach (var survey in Model.SurveyPerformance)
                            {
                                <tr class="hover:bg-accent/10 transition-colors">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium">@survey.Title</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm">@survey.ResponseCount</div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="w-16 bg-secondary rounded-full h-1.5 mr-2">
                                                <div class="bg-primary h-1.5 rounded-full" style="width: @(survey.CompletionRate)%"></div>
                                            </div>
                                            <span class="text-sm">@survey.CompletionRate%</span>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                        @survey.AverageTimeMinutes min
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="px-6 py-10 text-center text-sm text-muted-foreground">
                                    <p>No survey performance data available.</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Demographic & Device Distribution -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            <div class="card p-6">
                <h2 class="text-xl font-bold mb-4">Demographics</h2>
                <div class="w-full h-[250px]" id="demographicsChart">
                    <!-- Chart will be rendered here -->
                    <div class="flex items-center justify-center h-full">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    </div>
                </div>
            </div>
            
            <div class="card p-6">
                <h2 class="text-xl font-bold mb-4">Device Distribution</h2>
                <div class="w-full h-[250px]" id="deviceChart">
                    <!-- Chart will be rendered here -->
                    <div class="flex items-center justify-center h-full">
                        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Response Trends Chart
            const responseTrendsCtx = document.getElementById('responseTrendsChart').getContext('2d');
            document.getElementById('responseTrendsChart').innerHTML = '';
            
            const responseLabels = @Html.Raw(Json.Serialize(Model.ResponseTrends.Select(t => t.Period)));
            const responseData = @Html.Raw(Json.Serialize(Model.ResponseTrends.Select(t => t.ResponseCount)));
            
            new Chart(responseTrendsCtx, {
                type: 'line',
                data: {
                    labels: responseLabels,
                    datasets: [{
                        label: 'Responses',
                        data: responseData,
                        fill: true,
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderColor: '#3b82f6',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
            
            // Demographics Chart
            const demographicsCtx = document.getElementById('demographicsChart').getContext('2d');
            document.getElementById('demographicsChart').innerHTML = '';
            
            const demoLabels = @Html.Raw(Json.Serialize(Model.Demographics.Select(d => d.Category)));
            const demoData = @Html.Raw(Json.Serialize(Model.Demographics.Select(d => d.Percentage)));
            
            new Chart(demographicsCtx, {
                type: 'doughnut',
                data: {
                    labels: demoLabels,
                    datasets: [{
                        data: demoData,
                        backgroundColor: [
                            '#3b82f6',
                            '#10b981',
                            '#f59e0b',
                            '#ef4444',
                            '#8b5cf6'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        }
                    }
                }
            });
            
            // Device Chart
            const deviceCtx = document.getElementById('deviceChart').getContext('2d');
            document.getElementById('deviceChart').innerHTML = '';
            
            const deviceLabels = @Html.Raw(Json.Serialize(Model.DeviceDistribution.Select(d => d.DeviceType)));
            const deviceData = @Html.Raw(Json.Serialize(Model.DeviceDistribution.Select(d => d.Percentage)));
            
            new Chart(deviceCtx, {
                type: 'pie',
                data: {
                    labels: deviceLabels,
                    datasets: [{
                        data: deviceData,
                        backgroundColor: [
                            '#3b82f6',
                            '#10b981',
                            '#f59e0b',
                            '#ef4444'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right'
                        }
                    }
                }
            });
        });
    </script>
}
