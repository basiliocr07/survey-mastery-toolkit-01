
@model SurveyApp.WebMvc.Models.SurveyResponseAnalyticsViewModel
@{
    ViewData["Title"] = "Response Details";
}

<div class="w-full px-4 sm:px-6 lg:px-8 pb-10">
    <div class="w-full max-w-[1200px] mx-auto bg-white">
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold tracking-tight sm:text-4xl mb-2">Response Details</h1>
                <p class="text-muted-foreground">
                    Detailed view of an individual survey response
                </p>
            </div>
            
            <div class="flex space-x-2">
                <a href="@Url.Action("Responses", new { surveyId = Model.SurveyId })" class="btn btn-outline btn-sm">
                    <i class="fas fa-arrow-left mr-2"></i>Back to Responses
                </a>
                <a href="#" class="btn btn-sm" onclick="window.print();">
                    <i class="fas fa-print mr-2"></i>Print
                </a>
                <div class="dropdown dropdown-end">
                    <button class="btn btn-sm btn-ghost">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                    <ul class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                        <li><a href="#"><i class="fas fa-download mr-2"></i>Export as PDF</a></li>
                        <li><a href="#"><i class="fas fa-envelope mr-2"></i>Send by Email</a></li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Tabs para navegación -->
        <div class="tabs tabs-boxed mb-6">
            <a class="tab tab-active" href="#summary">Summary</a>
            <a class="tab" href="#responses">Responses</a>
            <a class="tab" href="#analytics">Analytics</a>
        </div>
        
        <div id="summary" class="mt-6">
            <!-- Response Summary Card -->
            <div class="card p-6 mb-6 border">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <h2 class="text-xl font-bold mb-4">@Model.SurveyTitle</h2>
                        <div class="text-sm space-y-2">
                            <p><span class="font-medium">Response ID:</span> @Model.Id</p>
                            <p><span class="font-medium">Submitted:</span> @Model.SubmittedAt.ToString("yyyy-MM-dd HH:mm")</p>
                            <p><span class="font-medium">Status:</span> 
                                @if (Model.IsValidated)
                                {
                                    <span class="badge badge-success">Valid</span>
                                }
                                else
                                {
                                    <span class="badge badge-warning">Partially Valid</span>
                                }
                            </p>
                            <p><span class="font-medium">Completion Time:</span> @Model.FormattedCompletionTime</p>
                            <p><span class="font-medium">Validation Rate:</span> @Model.ValidationRate.ToString("F1")%</p>
                        </div>
                    </div>
                    
                    <div>
                        <h3 class="text-lg font-medium mb-2">Respondent Information</h3>
                        <div class="text-sm space-y-2">
                            <p><span class="font-medium">Name:</span> @Model.RespondentName</p>
                            <p><span class="font-medium">Email:</span> @Model.RespondentEmail</p>
                            @if (!string.IsNullOrEmpty(Model.RespondentPhone))
                            {
                                <p><span class="font-medium">Phone:</span> @Model.RespondentPhone</p>
                            }
                            @if (!string.IsNullOrEmpty(Model.RespondentCompany))
                            {
                                <p><span class="font-medium">Company:</span> @Model.RespondentCompany</p>
                            }
                            
                            <!-- Información técnica -->
                            <div class="mt-4 pt-4 border-t">
                                <h4 class="text-sm font-medium mb-2">Technical Information</h4>
                                <div class="grid grid-cols-2 gap-2">
                                    <p><span class="font-medium">Device:</span> @Model.DeviceType</p>
                                    <p><span class="font-medium">Browser:</span> @Model.Browser</p>
                                    <p><span class="font-medium">OS:</span> @Model.OperatingSystem</p>
                                    <p><span class="font-medium">Location:</span> @Model.Location</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Metrics Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div class="card border p-4">
                    <div class="text-sm text-muted-foreground">Questions</div>
                    <div class="text-2xl font-bold">@Model.QuestionCount</div>
                </div>
                <div class="card border p-4">
                    <div class="text-sm text-muted-foreground">Valid Answers</div>
                    <div class="text-2xl font-bold">@Model.ValidAnswersCount</div>
                </div>
                <div class="card border p-4">
                    <div class="text-sm text-muted-foreground">Average Time per Question</div>
                    <div class="text-2xl font-bold">@TimeSpan.FromSeconds(Model.AverageTimePerQuestion).ToString(@"mm\:ss")</div>
                </div>
                <div class="card border p-4">
                    <div class="text-sm text-muted-foreground">Completion Rate</div>
                    <div class="text-2xl font-bold">@(Model.QuestionCount > 0 ? ((double)Model.Answers.Count(a => !a.IsSkipped) / Model.QuestionCount * 100).ToString("F1") : "0")%</div>
                </div>
            </div>
            
            <!-- Question Type Distribution -->
            <div class="card border p-6 mb-6">
                <h3 class="text-lg font-medium mb-4">Question Type Distribution</h3>
                <div id="questionTypeChart" style="height: 300px;"></div>
            </div>
        </div>
        
        <div id="responses" class="mt-6" style="display: none;">
            <!-- Response Answers Card -->
            <div class="card border">
                <div class="px-6 py-4 border-b">
                    <h2 class="text-xl font-bold">Survey Answers</h2>
                </div>
                
                <div class="p-6">
                    <div class="space-y-6">
                        @foreach (var answer in Model.Answers)
                        {
                            <div class="border rounded-md p-4 @(!answer.IsValid ? "bg-red-50" : "")">
                                <div class="flex justify-between">
                                    <h3 class="font-medium mb-2">@answer.QuestionTitle</h3>
                                    <div>
                                        @if (answer.IsValid)
                                        {
                                            <span class="px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800">
                                                Valid
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800">
                                                Invalid
                                            </span>
                                        }
                                    </div>
                                </div>
                                
                                <div class="flex flex-wrap gap-4 text-sm text-muted-foreground mt-1 mb-3">
                                    <span>Type: @answer.QuestionType</span>
                                    <span>Time: @answer.FormattedCompletionTime</span>
                                    @if (answer.HasFreeformInput)
                                    {
                                        <span>Characters: @answer.CharacterCount</span>
                                    }
                                </div>
                                
                                @if (answer.HasMultipleChoice && answer.MultipleAnswers != null && answer.MultipleAnswers.Any())
                                {
                                    <div class="mt-2">
                                        <p class="font-medium text-sm">Selected Options:</p>
                                        <ul class="list-disc list-inside text-sm mt-1">
                                            @foreach (var option in answer.MultipleAnswers)
                                            {
                                                <li>@option</li>
                                            }
                                        </ul>
                                    </div>
                                }
                                else if (answer.IsRating)
                                {
                                    <div class="mt-2">
                                        <p class="font-medium text-sm">Rating:</p>
                                        <div class="flex items-center mt-1">
                                            @{
                                                var rating = !string.IsNullOrEmpty(answer.Answer) && int.TryParse(answer.Answer, out var r) ? r : 0;
                                                var maxRating = answer.QuestionType.Equals("nps", StringComparison.OrdinalIgnoreCase) ? 10 : 5;
                                                
                                                for (int i = 1; i <= maxRating; i++)
                                                {
                                                    <div class="w-6 h-6 flex items-center justify-center @(i <= rating ? "bg-primary text-white" : "bg-gray-200") 
                                                             rounded-full mr-1">
                                                        @i
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="mt-2">
                                        <p class="font-medium text-sm">Answer:</p>
                                        <p class="text-sm mt-1">@(string.IsNullOrEmpty(answer.Answer) ? "(No response)" : answer.Answer)</p>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <div id="analytics" class="mt-6" style="display: none;">
            <!-- Analytics Content -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                <div class="card border p-6">
                    <h3 class="text-lg font-medium mb-4">Completion Rate by Question Type</h3>
                    <div id="completionRateChart" style="height: 250px;">
                        @if (!Model.CompletionRateByQuestionType.Any())
                        {
                            <div class="flex items-center justify-center h-full">
                                <p class="text-muted-foreground">No data available</p>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="card border p-6">
                    <h3 class="text-lg font-medium mb-4">Average Score by Category</h3>
                    <div id="categoryScoreChart" style="height: 250px;">
                        @if (!Model.AverageScoreByCategory.Any())
                        {
                            <div class="flex items-center justify-center h-full">
                                <p class="text-muted-foreground">No category data available</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Data Quality Assessment -->
            <div class="card border p-6 mb-8">
                <h3 class="text-lg font-medium mb-4">Data Quality Assessment</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="p-4 border rounded-md">
                        <h4 class="font-medium mb-2">Validation</h4>
                        <div class="w-full bg-gray-200 rounded-full h-2.5">
                            <div class="bg-primary h-2.5 rounded-full" style="width: @(Model.ValidationRate)%"></div>
                        </div>
                        <p class="text-sm text-muted-foreground mt-2">@Model.ValidationRate.ToString("F1")% of answers are valid</p>
                    </div>
                    
                    <div class="p-4 border rounded-md">
                        <h4 class="font-medium mb-2">Completeness</h4>
                        <div class="w-full bg-gray-200 rounded-full h-2.5">
                            <div class="bg-primary h-2.5 rounded-full" style="width: @(Model.Answers.Count(a => !a.IsSkipped) * 100 / Math.Max(1, Model.QuestionCount))%"></div>
                        </div>
                        <p class="text-sm text-muted-foreground mt-2">@(Model.Answers.Count(a => !a.IsSkipped) * 100 / Math.Max(1, Model.QuestionCount))% of questions answered</p>
                    </div>
                    
                    <div class="p-4 border rounded-md">
                        <h4 class="font-medium mb-2">Response Time</h4>
                        <p class="text-lg font-bold">@Model.FormattedCompletionTime</p>
                        <p class="text-sm text-muted-foreground mt-2">
                            @if (Model.CompletionTime < 60)
                            {
                                <span class="text-yellow-600">Very quick response</span>
                            }
                            else if (Model.CompletionTime < 300)
                            {
                                <span class="text-green-600">Normal response time</span>
                            }
                            else
                            {
                                <span class="text-blue-600">Detailed response</span>
                            }
                        </p>
                    </div>
                </div>
            </div>
            
            <!-- Individual Question Analysis -->
            <div class="card border">
                <div class="px-6 py-4 border-b">
                    <h3 class="text-lg font-medium">Individual Question Analysis</h3>
                </div>
                
                <div class="p-6">
                    <div class="space-y-6">
                        @foreach (var answer in Model.Answers)
                        {
                            <div class="border rounded-md p-4">
                                <h4 class="font-medium mb-2">@answer.QuestionTitle</h4>
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                    <div>
                                        <p class="text-muted-foreground">Time Spent</p>
                                        <p class="font-medium">@answer.FormattedCompletionTime</p>
                                    </div>
                                    <div>
                                        <p class="text-muted-foreground">Quality</p>
                                        <p class="font-medium">
                                            @if (answer.IsValid)
                                            {
                                                <span class="text-green-600">Valid</span>
                                            }
                                            else
                                            {
                                                <span class="text-red-600">Invalid</span>
                                            }
                                        </p>
                                    </div>
                                    <div>
                                        <p class="text-muted-foreground">Response Data</p>
                                        @if (answer.HasFreeformInput)
                                        {
                                            <p class="font-medium">@answer.CharacterCount characters</p>
                                        }
                                        else if (answer.HasMultipleChoice)
                                        {
                                            <p class="font-medium">@(answer.MultipleAnswers?.Count ?? 0) options selected</p>
                                        }
                                        else if (answer.IsRating)
                                        {
                                            <p class="font-medium">Rating: @answer.Answer</p>
                                        }
                                        else
                                        {
                                            <p class="font-medium">@(!string.IsNullOrEmpty(answer.Answer) ? "Answered" : "Skipped")</p>
                                        }
                                    </div>
                                </div>
                                
                                @if (answer.IsRating || (answer.HasSingleChoice && !string.IsNullOrEmpty(answer.Answer)))
                                {
                                    <div class="mt-4" id="chart-@answer.QuestionId" style="height: 150px;"></div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab navigation
            document.querySelectorAll('.tabs a').forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = this.getAttribute('href').substring(1);
                    
                    // Hide all content
                    document.querySelectorAll('#summary, #responses, #analytics').forEach(content => {
                        content.style.display = 'none';
                    });
                    
                    // Remove active class from all tabs
                    document.querySelectorAll('.tabs a').forEach(t => {
                        t.classList.remove('tab-active');
                    });
                    
                    // Show selected content and mark tab as active
                    document.getElementById(target).style.display = 'block';
                    this.classList.add('tab-active');
                });
            });
            
            // Question Type Distribution Chart
            const questionTypes = @Html.Raw(Json.Serialize(Model.QuestionTypeDistribution.Keys));
            const questionTypeCounts = @Html.Raw(Json.Serialize(Model.QuestionTypeDistribution.Values));
            
            if (document.getElementById('questionTypeChart') && questionTypes.length > 0) {
                const questionTypeCtx = document.getElementById('questionTypeChart').getContext('2d');
                
                new Chart(questionTypeCtx, {
                    type: 'doughnut',
                    data: {
                        labels: questionTypes,
                        datasets: [{
                            data: questionTypeCounts,
                            backgroundColor: [
                                '#3b82f6',
                                '#10b981',
                                '#f59e0b',
                                '#ef4444',
                                '#8b5cf6',
                                '#ec4899'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right'
                            }
                        }
                    }
                });
            }
            
            // Completion Rate by Question Type Chart
            const completionRateTypes = @Html.Raw(Json.Serialize(Model.CompletionRateByQuestionType.Keys));
            const completionRateValues = @Html.Raw(Json.Serialize(Model.CompletionRateByQuestionType.Values));
            
            if (document.getElementById('completionRateChart') && completionRateTypes.length > 0) {
                const completionRateCtx = document.getElementById('completionRateChart').getContext('2d');
                
                new Chart(completionRateCtx, {
                    type: 'bar',
                    data: {
                        labels: completionRateTypes,
                        datasets: [{
                            label: 'Completion Rate (%)',
                            data: completionRateValues,
                            backgroundColor: '#10b981'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100
                            }
                        }
                    }
                });
            }
            
            // Average Score by Category Chart
            const categoryLabels = @Html.Raw(Json.Serialize(Model.AverageScoreByCategory.Keys));
            const categoryScores = @Html.Raw(Json.Serialize(Model.AverageScoreByCategory.Values));
            
            if (document.getElementById('categoryScoreChart') && categoryLabels.length > 0) {
                const categoryScoreCtx = document.getElementById('categoryScoreChart').getContext('2d');
                
                new Chart(categoryScoreCtx, {
                    type: 'radar',
                    data: {
                        labels: categoryLabels,
                        datasets: [{
                            label: 'Average Score',
                            data: categoryScores,
                            backgroundColor: 'rgba(59, 130, 246, 0.2)',
                            borderColor: '#3b82f6',
                            pointBackgroundColor: '#3b82f6'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            r: {
                                beginAtZero: true,
                                max: 10
                            }
                        }
                    }
                });
            }
            
            // Individual Question Charts
            @foreach (var answer in Model.Answers)
            {
                if (answer.IsRating || (answer.HasSingleChoice && !string.IsNullOrEmpty(answer.Answer)))
                {
                    <text>
                    if (document.getElementById('chart-@answer.QuestionId')) {
                        const questionCtx = document.getElementById('chart-@answer.QuestionId').getContext('2d');
                        
                        @if (answer.IsRating)
                        {
                            <text>
                            new Chart(questionCtx, {
                                type: 'bar',
                                data: {
                                    labels: ['Rating'],
                                    datasets: [{
                                        label: 'Rating Value',
                                        data: [@answer.ScoreValue],
                                        backgroundColor: '#3b82f6'
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            max: @(answer.QuestionType.Equals("nps", StringComparison.OrdinalIgnoreCase) ? 10 : 5)
                                        }
                                    }
                                }
                            });
                            </text>
                        }
                        else if (answer.HasSingleChoice)
                        {
                            <text>
                            new Chart(questionCtx, {
                                type: 'pie',
                                data: {
                                    labels: ['@answer.Answer', 'Other Options'],
                                    datasets: [{
                                        data: [1, 0],
                                        backgroundColor: ['#3b82f6', '#e5e7eb']
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    plugins: {
                                        legend: {
                                            position: 'right'
                                        }
                                    }
                                }
                            });
                            </text>
                        }
                    }
                    </text>
                }
            }
        });
    </script>
}
