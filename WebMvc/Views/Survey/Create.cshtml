
@model SurveyApp.WebMvc.Models.SurveyCreateViewModel
@{
    ViewData["Title"] = "Create Survey";
}

<div class="container mx-auto pb-10 px-4 md:px-6">
    <div class="flex flex-col space-y-6">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold tracking-tight">Create New Survey</h1>
                <p class="text-muted-foreground mt-1">Design your survey, add questions, and configure delivery settings</p>
            </div>
            
            <div>
                <a asp-action="Index" class="btn btn-outline btn-sm">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Back to List
                </a>
            </div>
        </div>

        <div class="card shadow-sm">
            <form asp-action="Create" method="post">
                <div asp-validation-summary="ModelOnly" class="text-destructive" role="alert"></div>
                
                <!-- Tabs for Survey Creation -->
                <div class="border-b">
                    <div class="flex p-2">
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1 bg-primary/10 text-primary" onclick="switchTab('design')">
                            <i class="fas fa-pencil-alt mr-2"></i>Design
                        </button>
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1" onclick="switchTab('email')">
                            <i class="fas fa-envelope mr-2"></i>Email Delivery
                        </button>
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1" onclick="switchTab('settings')">
                            <i class="fas fa-cog mr-2"></i>Settings
                        </button>
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1" onclick="switchTab('preview')">
                            <i class="fas fa-eye mr-2"></i>Preview
                        </button>
                    </div>
                </div>
                
                <!-- Design Tab -->
                <div id="design-tab" class="tab-content p-6">
                    <div class="grid grid-cols-1 gap-6">
                        <div class="space-y-2">
                            <label asp-for="Title" class="text-sm font-medium">Survey Title</label>
                            <input asp-for="Title" class="form-input w-full rounded-md border" placeholder="Enter survey title" />
                            <span asp-validation-for="Title" class="text-destructive text-xs"></span>
                        </div>
                        
                        <div class="space-y-2">
                            <label asp-for="Description" class="text-sm font-medium">Description</label>
                            <textarea asp-for="Description" class="form-textarea w-full rounded-md border min-h-[100px]" placeholder="Enter survey description"></textarea>
                            <span asp-validation-for="Description" class="text-destructive text-xs"></span>
                        </div>
                        
                        <div class="border-t pt-6">
                            <h3 class="text-lg font-medium mb-4">Survey Questions</h3>
                            
                            <div id="questions-container">
                                <!-- Question items will be added here -->
                                @if (Model?.Questions != null && Model.Questions.Any())
                                {
                                    @for (int i = 0; i < Model.Questions.Count; i++)
                                    {
                                        <partial name="_QuestionPartial" model="Model.Questions[i]" />
                                    }
                                }
                            </div>
                            
                            <div class="mt-4">
                                <button type="button" id="add-question-btn" class="btn btn-outline btn-sm">
                                    <i class="fas fa-plus mr-2"></i>Add Question
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Email Delivery Tab -->
                <div id="email-tab" class="tab-content p-6 hidden">
                    <div class="space-y-6">
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="enableEmailDelivery" name="EnableEmailDelivery" class="rounded border-gray-300 text-primary focus:ring-primary" />
                            <label for="enableEmailDelivery" class="font-medium">Enable Email Delivery</label>
                        </div>
                        
                        <div id="email-settings" class="space-y-4">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="space-y-2">
                                    <label for="SenderName" class="text-sm font-medium">Sender Name</label>
                                    <input type="text" id="SenderName" name="SenderName" class="form-input w-full rounded-md border" placeholder="Company Name" />
                                </div>
                                
                                <div class="space-y-2">
                                    <label for="SenderEmail" class="text-sm font-medium">Sender Email</label>
                                    <input type="email" id="SenderEmail" name="SenderEmail" class="form-input w-full rounded-md border" placeholder="noreply@example.com" />
                                </div>
                            </div>
                            
                            <div class="space-y-2">
                                <label for="EmailSubject" class="text-sm font-medium">Email Subject</label>
                                <input type="text" id="EmailSubject" name="EmailSubject" class="form-input w-full rounded-md border" placeholder="Please complete our survey" />
                            </div>
                            
                            <div class="space-y-2">
                                <label for="EmailBody" class="text-sm font-medium">Email Message</label>
                                <textarea id="EmailBody" name="EmailBody" class="form-textarea w-full rounded-md border min-h-[150px]" placeholder="Dear recipient, we would appreciate your feedback..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Settings Tab -->
                <div id="settings-tab" class="tab-content p-6 hidden">
                    <div class="space-y-6">
                        <div class="space-y-2">
                            <label for="ExpiryDate" class="text-sm font-medium">Survey Expiry Date (Optional)</label>
                            <input type="date" id="ExpiryDate" name="ExpiryDate" class="form-input w-full rounded-md border" />
                        </div>
                        
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="AllowAnonymousResponses" name="AllowAnonymousResponses" class="rounded border-gray-300 text-primary focus:ring-primary" />
                            <label for="AllowAnonymousResponses" class="font-medium">Allow Anonymous Responses</label>
                        </div>
                        
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="LimitOneResponsePerUser" name="LimitOneResponsePerUser" class="rounded border-gray-300 text-primary focus:ring-primary" />
                            <label for="LimitOneResponsePerUser" class="font-medium">Limit to One Response Per User</label>
                        </div>
                        
                        <div class="space-y-2">
                            <label for="ThankYouMessage" class="text-sm font-medium">Thank You Message</label>
                            <textarea id="ThankYouMessage" name="ThankYouMessage" class="form-textarea w-full rounded-md border min-h-[100px]" placeholder="Thank you for completing our survey!"></textarea>
                        </div>
                    </div>
                </div>
                
                <!-- Preview Tab -->
                <div id="preview-tab" class="tab-content p-6 hidden">
                    <div class="bg-accent/30 rounded-lg p-6 mb-6">
                        <h2 class="text-xl font-semibold mb-2" id="preview-title">Survey Title</h2>
                        <p class="text-muted-foreground mb-6" id="preview-description">Survey description will appear here.</p>
                        
                        <div id="preview-questions" class="space-y-8">
                            <p class="text-center text-muted-foreground">Add questions to see a preview</p>
                        </div>
                    </div>
                </div>
                
                <div class="border-t p-6 flex justify-end gap-2">
                    <a asp-action="Index" class="btn btn-outline">Cancel</a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save mr-2"></i>Create Survey
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Tab switching functionality
        function switchTab(tabName) {
            const tabContents = document.querySelectorAll('.tab-content');
            const tabButtons = document.querySelectorAll('.btn-ghost');
            
            // Hide all tabs
            tabContents.forEach(tab => tab.classList.add('hidden'));
            
            // Remove active class from all buttons
            tabButtons.forEach(btn => {
                btn.classList.remove('bg-primary/10');
                btn.classList.remove('text-primary');
            });
            
            // Show selected tab
            document.getElementById(tabName + '-tab').classList.remove('hidden');
            
            // Set active class on selected button
            const activeButton = Array.from(tabButtons).find(btn => btn.innerText.includes(tabName.charAt(0).toUpperCase() + tabName.slice(1)));
            if (activeButton) {
                activeButton.classList.add('bg-primary/10');
                activeButton.classList.add('text-primary');
            }
            
            // Update preview if preview tab is selected
            if (tabName === 'preview') {
                updatePreview();
            }
        }
        
        // Update preview tab content
        function updatePreview() {
            const title = document.getElementById('Title').value || 'Survey Title';
            const description = document.getElementById('Description').value || 'Survey description will appear here.';
            
            document.getElementById('preview-title').innerText = title;
            document.getElementById('preview-description').innerText = description;
            
            // Update questions preview (this would be more complex in a real implementation)
            const questionsContainer = document.getElementById('preview-questions');
            const questionElements = document.querySelectorAll('.question-item');
            
            if (questionElements.length > 0) {
                questionsContainer.innerHTML = '';
                
                questionElements.forEach((questionEl, index) => {
                    const questionText = questionEl.querySelector('input[name$=".QuestionText"]').value || 'Question text';
                    const questionType = questionEl.querySelector('select[name$=".QuestionType"]').value;
                    
                    const previewQuestion = document.createElement('div');
                    previewQuestion.className = 'bg-white p-4 rounded-md shadow-sm';
                    
                    previewQuestion.innerHTML = `
                        <h3 class="font-medium mb-2">${index + 1}. ${questionText}</h3>
                        <div class="ml-4">
                            ${getQuestionTypePreview(questionType)}
                        </div>
                    `;
                    
                    questionsContainer.appendChild(previewQuestion);
                });
            } else {
                questionsContainer.innerHTML = '<p class="text-center text-muted-foreground">Add questions to see a preview</p>';
            }
        }
        
        // Generate preview HTML based on question type
        function getQuestionTypePreview(type) {
            switch (type) {
                case 'Text':
                    return '<input type="text" class="form-input w-full rounded-md border" placeholder="Text answer" disabled />';
                case 'MultipleChoice':
                    return `
                        <div class="space-y-2">
                            <div class="flex items-center">
                                <input type="radio" disabled class="mr-2" /> Option 1
                            </div>
                            <div class="flex items-center">
                                <input type="radio" disabled class="mr-2" /> Option 2
                            </div>
                            <div class="flex items-center">
                                <input type="radio" disabled class="mr-2" /> Option 3
                            </div>
                        </div>
                    `;
                case 'Checkbox':
                    return `
                        <div class="space-y-2">
                            <div class="flex items-center">
                                <input type="checkbox" disabled class="mr-2" /> Option 1
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" disabled class="mr-2" /> Option 2
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" disabled class="mr-2" /> Option 3
                            </div>
                        </div>
                    `;
                case 'Rating':
                    return `
                        <div class="flex space-x-4">
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>1</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>2</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>3</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>4</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>5</div>
                            </div>
                        </div>
                    `;
                default:
                    return '<p class="text-muted-foreground">Preview not available for this question type</p>';
            }
        }
        
        // Add question functionality
        document.getElementById('add-question-btn').addEventListener('click', function() {
            const questionsContainer = document.getElementById('questions-container');
            const questionCount = document.querySelectorAll('.question-item').length;
            
            // Create a new question item (this would be partial view in ASP.NET)
            const newQuestion = document.createElement('div');
            newQuestion.className = 'question-item bg-accent/30 p-4 rounded-lg mb-4';
            newQuestion.innerHTML = `
                <div class="flex justify-between mb-2">
                    <h4 class="font-medium">Question ${questionCount + 1}</h4>
                    <button type="button" class="text-destructive hover:text-destructive/80" onclick="removeQuestion(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <div class="space-y-4">
                    <div class="space-y-2">
                        <label class="text-sm font-medium">Question Text</label>
                        <input type="text" name="Questions[${questionCount}].QuestionText" class="form-input w-full rounded-md border" placeholder="Enter your question" />
                    </div>
                    
                    <div class="space-y-2">
                        <label class="text-sm font-medium">Question Type</label>
                        <select name="Questions[${questionCount}].QuestionType" class="form-select w-full rounded-md border" onchange="toggleQuestionOptions(this)">
                            <option value="Text">Text</option>
                            <option value="MultipleChoice">Multiple Choice</option>
                            <option value="Checkbox">Checkbox</option>
                            <option value="Rating">Rating</option>
                        </select>
                    </div>
                    
                    <div class="question-options hidden">
                        <div class="space-y-2">
                            <label class="text-sm font-medium">Options</label>
                            <div class="options-container space-y-2">
                                <div class="flex items-center gap-2">
                                    <input type="text" name="Questions[${questionCount}].Options[0]" class="form-input flex-1 rounded-md border" placeholder="Option 1" />
                                    <button type="button" class="text-destructive" onclick="removeOption(this)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <div class="flex items-center gap-2">
                                    <input type="text" name="Questions[${questionCount}].Options[1]" class="form-input flex-1 rounded-md border" placeholder="Option 2" />
                                    <button type="button" class="text-destructive" onclick="removeOption(this)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <button type="button" class="btn btn-outline btn-sm mt-2" onclick="addOption(this, ${questionCount})">
                                <i class="fas fa-plus mr-1"></i> Add Option
                            </button>
                        </div>
                    </div>
                    
                    <div class="space-y-2">
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="required-${questionCount}" name="Questions[${questionCount}].Required" class="rounded border-gray-300 text-primary focus:ring-primary" />
                            <label for="required-${questionCount}" class="text-sm font-medium">Required Question</label>
                        </div>
                    </div>
                </div>
            `;
            
            questionsContainer.appendChild(newQuestion);
        });
        
        // Remove question functionality
        function removeQuestion(button) {
            const questionItem = button.closest('.question-item');
            questionItem.remove();
            
            // Renumber remaining questions
            const questionItems = document.querySelectorAll('.question-item');
            questionItems.forEach((item, index) => {
                const heading = item.querySelector('h4');
                if (heading) {
                    heading.innerText = `Question ${index + 1}`;
                }
                
                // Update name attributes to maintain correct indexing
                const inputs = item.querySelectorAll('input, select');
                inputs.forEach(input => {
                    const name = input.getAttribute('name');
                    if (name) {
                        input.setAttribute('name', name.replace(/Questions\[\d+\]/, `Questions[${index}]`));
                    }
                });
            });
        }
        
        // Toggle question options based on question type
        function toggleQuestionOptions(select) {
            const questionItem = select.closest('.question-item');
            const optionsDiv = questionItem.querySelector('.question-options');
            
            if (select.value === 'MultipleChoice' || select.value === 'Checkbox') {
                optionsDiv.classList.remove('hidden');
            } else {
                optionsDiv.classList.add('hidden');
            }
        }
        
        // Add option to multiple choice/checkbox questions
        function addOption(button, questionIndex) {
            const optionsContainer = button.closest('.question-options').querySelector('.options-container');
            const optionCount = optionsContainer.children.length;
            
            const newOption = document.createElement('div');
            newOption.className = 'flex items-center gap-2';
            newOption.innerHTML = `
                <input type="text" name="Questions[${questionIndex}].Options[${optionCount}]" class="form-input flex-1 rounded-md border" placeholder="Option ${optionCount + 1}" />
                <button type="button" class="text-destructive" onclick="removeOption(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            optionsContainer.appendChild(newOption);
        }
        
        // Remove option from multiple choice/checkbox questions
        function removeOption(button) {
            const optionItem = button.closest('div');
            const optionsContainer = optionItem.parentElement;
            
            if (optionsContainer.children.length > 1) {
                optionItem.remove();
                
                // Update indices of remaining options
                const questionItem = optionsContainer.closest('.question-item');
                const questionIndex = Array.from(document.querySelectorAll('.question-item')).indexOf(questionItem);
                
                const options = optionsContainer.querySelectorAll('input[type="text"]');
                options.forEach((option, index) => {
                    option.setAttribute('name', `Questions[${questionIndex}].Options[${index}]`);
                    option.setAttribute('placeholder', `Option ${index + 1}`);
                });
            }
        }
        
        // Email delivery toggle
        document.getElementById('enableEmailDelivery').addEventListener('change', function() {
            const emailSettings = document.getElementById('email-settings');
            emailSettings.style.display = this.checked ? 'block' : 'none';
        });
        
        // Initialize email settings visibility
        document.addEventListener('DOMContentLoaded', function() {
            const enableEmail = document.getElementById('enableEmailDelivery');
            const emailSettings = document.getElementById('email-settings');
            emailSettings.style.display = enableEmail.checked ? 'block' : 'none';
        });
    </script>
}
