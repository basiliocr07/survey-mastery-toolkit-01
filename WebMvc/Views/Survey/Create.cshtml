
@model SurveyApp.WebMvc.Models.CreateSurveyViewModel

@{
    ViewData["Title"] = "Create Survey";
}

<div class="min-h-screen flex flex-col bg-background">
    <main class="flex-1 w-full max-w-7xl mx-auto pt-24 px-6 pb-16">
        <div class="mb-8">
            <h1 class="text-3xl font-bold mb-2">Create a New Survey</h1>
            <p class="text-muted-foreground">
                Design your survey, add questions, and customize settings
            </p>
        </div>

        <form asp-action="Create" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>

            <div class="bg-white shadow rounded-lg p-6 mb-6">
                <h2 class="text-xl font-semibold mb-4">Survey Details</h2>
                <div class="space-y-4">
                    <div>
                        <label asp-for="Title" class="block text-sm font-medium mb-1">Survey Title</label>
                        <input asp-for="Title" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="Enter survey title" />
                        <span asp-validation-for="Title" class="text-danger text-sm"></span>
                    </div>
                    <div>
                        <label asp-for="Description" class="block text-sm font-medium mb-1">Description (optional)</label>
                        <textarea asp-for="Description" class="w-full px-3 py-2 border border-gray-300 rounded-md min-h-[100px]" placeholder="Enter a description for your survey"></textarea>
                        <span asp-validation-for="Description" class="text-danger text-sm"></span>
                    </div>
                </div>
            </div>

            <div class="bg-white shadow rounded-lg p-6 mb-6">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-xl font-semibold">Questions</h2>
                    <button type="button" id="addQuestion" class="inline-flex items-center justify-center rounded-md bg-primary text-white px-4 py-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 h-4 w-4"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                        Add Question
                    </button>
                </div>

                <div id="questionsContainer" class="space-y-4">
                    @for (var i = 0; i < Model.Questions.Count; i++)
                    {
                        <div class="question-item bg-white shadow-sm rounded-lg border p-4" data-index="@i">
                            <div class="flex justify-between mb-4">
                                <h3 class="font-medium">Question @(i + 1)</h3>
                                <div class="flex space-x-2">
                                    @if (i > 0)
                                    {
                                        <button type="button" class="move-up text-gray-500 hover:text-gray-700">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><polyline points="18 15 12 9 6 15"></polyline></svg>
                                        </button>
                                    }
                                    @if (i < Model.Questions.Count - 1)
                                    {
                                        <button type="button" class="move-down text-gray-500 hover:text-gray-700">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                        </button>
                                    }
                                    <button type="button" class="delete-question text-red-500 hover:text-red-700">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path></svg>
                                    </button>
                                </div>
                            </div>

                            <div class="space-y-3">
                                <input type="hidden" asp-for="Questions[i].Title" />
                                <input type="hidden" asp-for="Questions[i].Description" />
                                <input type="hidden" asp-for="Questions[i].Type" />
                                <input type="hidden" asp-for="Questions[i].Required" />

                                <div>
                                    <label class="block text-sm font-medium mb-1">Question Title</label>
                                    <input type="text" class="question-title w-full px-3 py-2 border border-gray-300 rounded-md"
                                           value="@Model.Questions[i].Title" 
                                           onchange="updateHiddenField(this, 'Questions_@(i)__Title')" />
                                    <span class="field-validation-valid text-danger text-sm" data-valmsg-for="Questions[@i].Title" data-valmsg-replace="true"></span>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium mb-1">Question Type</label>
                                    <select class="question-type w-full px-3 py-2 border border-gray-300 rounded-md"
                                            onchange="updateQuestionType(this, @i)">
                                        <option value="SingleChoice" @(Model.Questions[i].Type == "SingleChoice" ? "selected" : "")>Single Choice</option>
                                        <option value="MultipleChoice" @(Model.Questions[i].Type == "MultipleChoice" ? "selected" : "")>Multiple Choice</option>
                                        <option value="Text" @(Model.Questions[i].Type == "Text" ? "selected" : "")>Text</option>
                                        <option value="Rating" @(Model.Questions[i].Type == "Rating" ? "selected" : "")>Rating</option>
                                    </select>
                                </div>

                                <div class="options-container @(Model.Questions[i].Type == "Text" || Model.Questions[i].Type == "Rating" ? "hidden" : "")">
                                    <label class="block text-sm font-medium mb-1">Options</label>
                                    <div class="options-list space-y-2">
                                        @for (var j = 0; j < Model.Questions[i].Options.Count; j++)
                                        {
                                            <div class="flex items-center">
                                                <input type="hidden" name="Questions[@i].Options[@j]" value="@Model.Questions[i].Options[j]" />
                                                <input type="text" class="option-input flex-1 px-3 py-1 border border-gray-300 rounded-md"
                                                       value="@Model.Questions[i].Options[j]"
                                                       onchange="updateOptionValue(this, @i, @j)" />
                                                <button type="button" class="remove-option ml-2 text-red-500">Ã—</button>
                                            </div>
                                        }
                                    </div>
                                    <button type="button" class="add-option mt-2 text-sm text-blue-600">+ Add Option</button>
                                </div>

                                <div class="flex items-center mt-2">
                                    <input type="checkbox" class="required-checkbox mr-2" 
                                           @(Model.Questions[i].Required ? "checked" : "")
                                           onchange="updateRequiredField(this, @i)" />
                                    <label class="text-sm">Required</label>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="bg-white shadow rounded-lg p-6 mb-6">
                <h2 class="text-xl font-semibold mb-4">Email Delivery Settings</h2>
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium mb-3">Delivery Method</label>
                        <div class="space-y-3">
                            <div class="flex items-start space-x-2">
                                <input type="radio" id="manual" name="DeliveryConfig.Type" value="Manual" 
                                       @(Model.DeliveryConfig.Type == "Manual" ? "checked" : "") 
                                       class="mt-1" />
                                <div class="grid gap-1.5">
                                    <label for="manual" class="font-medium">Manual Sending</label>
                                    <p class="text-sm text-gray-500">
                                        Send surveys manually when needed
                                    </p>
                                </div>
                            </div>
                            
                            <div class="flex items-start space-x-2">
                                <input type="radio" id="scheduled" name="DeliveryConfig.Type" value="Scheduled" 
                                       @(Model.DeliveryConfig.Type == "Scheduled" ? "checked" : "") 
                                       class="mt-1" />
                                <div class="grid gap-1.5">
                                    <label for="scheduled" class="font-medium">Scheduled</label>
                                    <p class="text-sm text-gray-500">
                                        Send surveys on a regular schedule (daily, weekly, monthly)
                                    </p>
                                </div>
                            </div>
                            
                            <div class="flex items-start space-x-2">
                                <input type="radio" id="triggered" name="DeliveryConfig.Type" value="Triggered" 
                                       @(Model.DeliveryConfig.Type == "Triggered" ? "checked" : "") 
                                       class="mt-1" />
                                <div class="grid gap-1.5">
                                    <label for="triggered" class="font-medium">Event Triggered</label>
                                    <p class="text-sm text-gray-500">
                                        Send surveys when specific events occur (ticket closed, purchase completed)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="pt-4 border-t">
                        <h3 class="text-lg font-medium mb-4">Recipient Emails</h3>
                        <div class="flex space-x-2 mb-4">
                            <input id="emailInput" type="email" placeholder="Add email address" class="flex-1 px-3 py-2 border border-gray-300 rounded-md" />
                            <button type="button" id="addEmail" class="inline-flex items-center justify-center rounded-md bg-primary text-white px-4 py-2">Add</button>
                        </div>

                        <div id="emailList" class="space-y-2">
                            @for (var i = 0; i < Model.DeliveryConfig.EmailAddresses.Count; i++)
                            {
                                <div class="flex items-center justify-between bg-gray-100 p-2 rounded">
                                    <input type="hidden" name="DeliveryConfig.EmailAddresses[@i]" value="@Model.DeliveryConfig.EmailAddresses[i]" />
                                    <span class="text-sm">@Model.DeliveryConfig.EmailAddresses[i]</span>
                                    <button type="button" class="remove-email text-red-500">Ã—</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex justify-end space-x-4 mt-8">
                <a asp-action="Index" class="inline-flex items-center justify-center rounded-md border border-gray-300 px-4 py-2">
                    Cancel
                </a>
                <button type="submit" class="inline-flex items-center justify-center rounded-md bg-primary text-white px-4 py-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 h-4 w-4"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>
                    Save Survey
                </button>
            </div>
        </form>
    </main>
</div>

@section Scripts {
    <script>
        // FunciÃ³n para actualizar campos ocultos
        function updateHiddenField(input, fieldName) {
            document.getElementById(fieldName).value = input.value;
        }
        
        // FunciÃ³n para actualizar el tipo de pregunta
        function updateQuestionType(select, index) {
            const questionItem = select.closest('.question-item');
            const optionsContainer = questionItem.querySelector('.options-container');
            const hiddenTypeInput = document.getElementById(`Questions_${index}__Type`);
            
            hiddenTypeInput.value = select.value;
            
            if (select.value === 'Text' || select.value === 'Rating') {
                optionsContainer.classList.add('hidden');
            } else {
                optionsContainer.classList.remove('hidden');
            }
        }
        
        // FunciÃ³n para actualizar el valor de una opciÃ³n
        function updateOptionValue(input, questionIndex, optionIndex) {
            const hiddenInput = document.querySelector(`input[name="Questions[${questionIndex}].Options[${optionIndex}]"]`);
            hiddenInput.value = input.value;
        }
        
        // FunciÃ³n para actualizar el campo requerido
        function updateRequiredField(checkbox, index) {
            const hiddenRequiredInput = document.getElementById(`Questions_${index}__Required`);
            hiddenRequiredInput.value = checkbox.checked;
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            // Manejar agregar una nueva pregunta
            document.getElementById('addQuestion').addEventListener('click', function() {
                const questionsContainer = document.getElementById('questionsContainer');
                const questionCount = document.querySelectorAll('.question-item').length;
                
                fetch(`/Survey/AddQuestion?index=${questionCount}`)
                    .then(response => response.text())
                    .then(html => {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        questionsContainer.appendChild(tempDiv.firstElementChild);
                        
                        setupQuestionEventListeners(tempDiv.firstElementChild);
                    });
            });
            
            // Configurar event listeners para las preguntas existentes
            document.querySelectorAll('.question-item').forEach(questionItem => {
                setupQuestionEventListeners(questionItem);
            });
            
            // Manejar agregar un nuevo email
            document.getElementById('addEmail').addEventListener('click', function() {
                const emailInput = document.getElementById('emailInput');
                const email = emailInput.value.trim();
                
                if (email && isValidEmail(email)) {
                    const emailList = document.getElementById('emailList');
                    const emailCount = emailList.querySelectorAll('div').length;
                    
                    const emailDiv = document.createElement('div');
                    emailDiv.className = 'flex items-center justify-between bg-gray-100 p-2 rounded';
                    emailDiv.innerHTML = `
                        <input type="hidden" name="DeliveryConfig.EmailAddresses[${emailCount}]" value="${email}" />
                        <span class="text-sm">${email}</span>
                        <button type="button" class="remove-email text-red-500">Ã—</button>
                    `;
                    
                    emailList.appendChild(emailDiv);
                    emailInput.value = '';
                    
                    emailDiv.querySelector('.remove-email').addEventListener('click', function() {
                        emailDiv.remove();
                        updateEmailIndices();
                    });
                } else {
                    alert('Please enter a valid email address');
                }
            });
            
            // Configurar event listeners para los emails existentes
            document.querySelectorAll('.remove-email').forEach(button => {
                button.addEventListener('click', function() {
                    button.closest('div').remove();
                    updateEmailIndices();
                });
            });
        });
        
        function setupQuestionEventListeners(questionItem) {
            // Manejar eliminaciÃ³n de preguntas
            const deleteButton = questionItem.querySelector('.delete-question');
            deleteButton.addEventListener('click', function() {
                if (document.querySelectorAll('.question-item').length <= 1) {
                    alert('Your survey must have at least one question');
                    return;
                }
                
                questionItem.remove();
                updateQuestionIndices();
            });
            
            // Manejar movimiento hacia arriba
            const moveUpButton = questionItem.querySelector('.move-up');
            if (moveUpButton) {
                moveUpButton.addEventListener('click', function() {
                    const prevQuestion = questionItem.previousElementSibling;
                    if (prevQuestion) {
                        questionItem.parentNode.insertBefore(questionItem, prevQuestion);
                        updateQuestionIndices();
                    }
                });
            }
            
            // Manejar movimiento hacia abajo
            const moveDownButton = questionItem.querySelector('.move-down');
            if (moveDownButton) {
                moveDownButton.addEventListener('click', function() {
                    const nextQuestion = questionItem.nextElementSibling;
                    if (nextQuestion) {
                        questionItem.parentNode.insertBefore(nextQuestion, questionItem);
                        updateQuestionIndices();
                    }
                });
            }
            
            // Manejar adiciÃ³n de opciones
            const addOptionButton = questionItem.querySelector('.add-option');
            if (addOptionButton) {
                addOptionButton.addEventListener('click', function() {
                    const optionsList = questionItem.querySelector('.options-list');
                    const optionCount = optionsList.querySelectorAll('.option-input').length;
                    const questionIndex = questionItem.getAttribute('data-index');
                    
                    const optionDiv = document.createElement('div');
                    optionDiv.className = 'flex items-center';
                    optionDiv.innerHTML = `
                        <input type="hidden" name="Questions[${questionIndex}].Options[${optionCount}]" value="New Option" />
                        <input type="text" class="option-input flex-1 px-3 py-1 border border-gray-300 rounded-md" 
                               value="New Option" 
                               onchange="updateOptionValue(this, ${questionIndex}, ${optionCount})" />
                        <button type="button" class="remove-option ml-2 text-red-500">Ã—</button>
                    `;
                    
                    optionsList.appendChild(optionDiv);
                    
                    // Configurar remove option para la nueva opciÃ³n
                    optionDiv.querySelector('.remove-option').addEventListener('click', function() {
                        optionDiv.remove();
                        updateOptionIndices(questionItem);
                    });
                });
            }
            
            // Manejar eliminaciÃ³n de opciones existentes
            questionItem.querySelectorAll('.remove-option').forEach(button => {
                button.addEventListener('click', function() {
                    const optionsList = questionItem.querySelector('.options-list');
                    if (optionsList.querySelectorAll('.option-input').length <= 2) {
                        alert('Each question must have at least two options');
                        return;
                    }
                    
                    button.closest('div').remove();
                    updateOptionIndices(questionItem);
                });
            });
        }
        
        // Actualizar Ã­ndices de preguntas
        function updateQuestionIndices() {
            document.querySelectorAll('.question-item').forEach((item, index) => {
                item.setAttribute('data-index', index);
                item.querySelector('h3').textContent = `Question ${index + 1}`;
                
                // Actualizar nombres e IDs de todos los campos dentro de la pregunta
                updateFieldNames(item, index);
            });
        }
        
        // Actualizar nombres de campos dentro de una pregunta
        function updateFieldNames(questionItem, questionIndex) {
            // Actualizar campos ocultos
            questionItem.querySelectorAll('input[type="hidden"]').forEach(input => {
                if (input.name.includes('Questions[')) {
                    input.name = input.name.replace(/Questions\[\d+\]/, `Questions[${questionIndex}]`);
                    input.id = input.id.replace(/Questions_\d+_/, `Questions_${questionIndex}_`);
                }
            });
            
            // Actualizar event listeners
            questionItem.querySelectorAll('.option-input').forEach((input, optionIndex) => {
                input.setAttribute('onchange', `updateOptionValue(this, ${questionIndex}, ${optionIndex})`);
            });
            
            // Actualizar checkbox required
            const requiredCheckbox = questionItem.querySelector('.required-checkbox');
            requiredCheckbox.setAttribute('onchange', `updateRequiredField(this, ${questionIndex})`);
            
            // Actualizar select de tipo
            const typeSelect = questionItem.querySelector('.question-type');
            typeSelect.setAttribute('onchange', `updateQuestionType(this, ${questionIndex})`);
        }
        
        // Actualizar Ã­ndices de opciones
        function updateOptionIndices(questionItem) {
            const questionIndex = questionItem.getAttribute('data-index');
            const optionInputs = questionItem.querySelectorAll('.option-input');
            
            optionInputs.forEach((input, optionIndex) => {
                const hiddenInput = input.previousElementSibling;
                hiddenInput.name = `Questions[${questionIndex}].Options[${optionIndex}]`;
                input.setAttribute('onchange', `updateOptionValue(this, ${questionIndex}, ${optionIndex})`);
            });
        }
        
        // Actualizar Ã­ndices de emails
        function updateEmailIndices() {
            const emailList = document.getElementById('emailList');
            const emails = emailList.querySelectorAll('div');
            
            emails.forEach((emailDiv, index) => {
                const hiddenInput = emailDiv.querySelector('input[type="hidden"]');
                hiddenInput.name = `DeliveryConfig.EmailAddresses[${index}]`;
            });
        }
        
        // Validar formato de email
        function isValidEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(String(email));
        }
    </script>
}
