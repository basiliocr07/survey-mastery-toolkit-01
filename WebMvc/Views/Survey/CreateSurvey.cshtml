
@model SurveyApp.WebMvc.Models.SurveyCreateViewModel
@{
    ViewData["Title"] = "Create Survey";
}

<div class="container mx-auto pb-10 px-4 md:px-6">
    <div class="flex flex-col space-y-6">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold tracking-tight">Create New Survey</h1>
                <p class="text-muted-foreground mt-1">Design your survey, add questions, and configure delivery settings</p>
            </div>
            
            <div>
                <a asp-action="Index" class="btn btn-outline btn-sm">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Back to List
                </a>
            </div>
        </div>

        <div class="card shadow-sm">
            <form asp-action="CreateSurvey" method="post">
                <div asp-validation-summary="ModelOnly" class="text-destructive" role="alert"></div>
                
                <!-- Tabs for Survey Creation -->
                <div class="border-b">
                    <div class="flex p-2">
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1 bg-primary/10 text-primary" onclick="switchTab('design')">
                            <i class="fas fa-pencil-alt mr-2"></i>Design
                        </button>
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1" onclick="switchTab('email')">
                            <i class="fas fa-envelope mr-2"></i>Email Delivery
                        </button>
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1" onclick="switchTab('settings')">
                            <i class="fas fa-cog mr-2"></i>Settings
                        </button>
                        <button type="button" class="btn btn-ghost btn-sm rounded-md mx-1" onclick="switchTab('preview')">
                            <i class="fas fa-eye mr-2"></i>Preview
                        </button>
                    </div>
                </div>
                
                <!-- Design Tab -->
                <div id="design-tab" class="tab-content p-6">
                    <div class="grid grid-cols-1 gap-6">
                        <div class="space-y-2">
                            <label asp-for="Title" class="text-sm font-medium">Survey Title</label>
                            <input asp-for="Title" class="form-input w-full rounded-md border" placeholder="Enter survey title" />
                            <span asp-validation-for="Title" class="text-destructive text-xs"></span>
                        </div>
                        
                        <div class="space-y-2">
                            <label asp-for="Description" class="text-sm font-medium">Description</label>
                            <textarea asp-for="Description" class="form-textarea w-full rounded-md border min-h-[100px]" placeholder="Enter survey description"></textarea>
                            <span asp-validation-for="Description" class="text-destructive text-xs"></span>
                        </div>
                        
                        <div class="space-y-2">
                            <label asp-for="Category" class="text-sm font-medium">Category</label>
                            <select asp-for="Category" class="form-select w-full rounded-md border">
                                <option value="General">General</option>
                                <option value="Customer Service">Customer Service</option>
                                <option value="Product Feedback">Product Feedback</option>
                                <option value="Website Experience">Website Experience</option>
                                <option value="Employee Satisfaction">Employee Satisfaction</option>
                            </select>
                            <span asp-validation-for="Category" class="text-destructive text-xs"></span>
                        </div>
                        
                        <div class="border-t pt-6">
                            <h3 class="text-lg font-medium mb-4">Survey Questions</h3>
                            
                            <div id="questions-container">
                                <!-- Question items will be added here -->
                                @if (Model?.Questions != null && Model.Questions.Any())
                                {
                                    @for (int i = 0; i < Model.Questions.Count; i++)
                                    {
                                        <partial name="_QuestionPartial" model="new Tuple<SurveyApp.WebMvc.Models.QuestionViewModel, int>(Model.Questions[i], i)" />
                                    }
                                }
                            </div>
                            
                            <div class="mt-4">
                                <button type="button" id="add-question-btn" class="btn btn-outline btn-sm">
                                    <i class="fas fa-plus mr-2"></i>Add Question
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Email Delivery Tab -->
                <div id="email-tab" class="tab-content p-6 hidden">
                    <div class="space-y-6">
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="enableEmailDelivery" name="EnableEmailDelivery" class="rounded border-gray-300 text-primary focus:ring-primary" />
                            <label for="enableEmailDelivery" class="font-medium">Enable Email Delivery</label>
                        </div>
                        
                        <div id="email-settings" class="space-y-4">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="space-y-2">
                                    <label for="SenderName" class="text-sm font-medium">Sender Name</label>
                                    <input type="text" id="SenderName" name="SenderName" class="form-input w-full rounded-md border" placeholder="Company Name" />
                                </div>
                                
                                <div class="space-y-2">
                                    <label for="SenderEmail" class="text-sm font-medium">Sender Email</label>
                                    <input type="email" id="SenderEmail" name="SenderEmail" class="form-input w-full rounded-md border" placeholder="noreply@example.com" />
                                </div>
                            </div>
                            
                            <div class="space-y-2">
                                <label for="EmailSubject" class="text-sm font-medium">Email Subject</label>
                                <input type="text" id="EmailSubject" name="EmailSubject" class="form-input w-full rounded-md border" placeholder="Please complete our survey" />
                            </div>
                            
                            <div class="space-y-2">
                                <label for="EmailBody" class="text-sm font-medium">Email Message</label>
                                <textarea id="EmailBody" name="EmailBody" class="form-textarea w-full rounded-md border min-h-[150px]" placeholder="Dear recipient, we would appreciate your feedback..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Settings Tab -->
                <div id="settings-tab" class="tab-content p-6 hidden">
                    <div class="space-y-6">
                        <div class="space-y-2">
                            <label for="ExpiryDate" class="text-sm font-medium">Survey Expiry Date (Optional)</label>
                            <input type="date" id="ExpiryDate" name="ExpiryDate" class="form-input w-full rounded-md border" />
                        </div>
                        
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="AllowAnonymousResponses" name="AllowAnonymousResponses" class="rounded border-gray-300 text-primary focus:ring-primary" checked />
                            <label for="AllowAnonymousResponses" class="font-medium">Allow Anonymous Responses</label>
                        </div>
                        
                        <div class="flex items-center gap-2">
                            <input type="checkbox" id="LimitOneResponsePerUser" name="LimitOneResponsePerUser" class="rounded border-gray-300 text-primary focus:ring-primary" />
                            <label for="LimitOneResponsePerUser" class="font-medium">Limit to One Response Per User</label>
                        </div>
                        
                        <div class="space-y-2">
                            <label for="ThankYouMessage" class="text-sm font-medium">Thank You Message</label>
                            <textarea id="ThankYouMessage" name="ThankYouMessage" class="form-textarea w-full rounded-md border min-h-[100px]" placeholder="Thank you for completing our survey!">Â¡Gracias por completar nuestra encuesta!</textarea>
                        </div>
                    </div>
                </div>
                
                <!-- Preview Tab -->
                <div id="preview-tab" class="tab-content p-6 hidden">
                    <div class="bg-accent/30 rounded-lg p-6 mb-6">
                        <h2 class="text-xl font-semibold mb-2" id="preview-title">Survey Title</h2>
                        <p class="text-muted-foreground mb-6" id="preview-description">Survey description will appear here.</p>
                        
                        <div id="preview-questions" class="space-y-8">
                            <p class="text-center text-muted-foreground">Add questions to see a preview</p>
                        </div>
                    </div>
                </div>
                
                <div class="border-t p-6 flex justify-end gap-2">
                    <a asp-action="Index" class="btn btn-outline">Cancel</a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save mr-2"></i>Create Survey
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Tab switching functionality
        function switchTab(tabName) {
            const tabContents = document.querySelectorAll('.tab-content');
            const tabButtons = document.querySelectorAll('.btn-ghost');
            
            // Hide all tabs
            tabContents.forEach(tab => tab.classList.add('hidden'));
            
            // Remove active class from all buttons
            tabButtons.forEach(btn => {
                btn.classList.remove('bg-primary/10');
                btn.classList.remove('text-primary');
            });
            
            // Show selected tab
            document.getElementById(tabName + '-tab').classList.remove('hidden');
            
            // Set active class on selected button
            const activeButton = Array.from(tabButtons).find(btn => btn.innerText.includes(tabName.charAt(0).toUpperCase() + tabName.slice(1)));
            if (activeButton) {
                activeButton.classList.add('bg-primary/10');
                activeButton.classList.add('text-primary');
            }
            
            // Update preview if preview tab is selected
            if (tabName === 'preview') {
                updatePreview();
            }
        }
        
        // Update preview tab content
        function updatePreview() {
            const title = document.getElementById('Title').value || 'Survey Title';
            const description = document.getElementById('Description').value || 'Survey description will appear here.';
            
            document.getElementById('preview-title').innerText = title;
            document.getElementById('preview-description').innerText = description;
            
            // Update questions preview (this would be more complex in a real implementation)
            const questionsContainer = document.getElementById('preview-questions');
            const questionElements = document.querySelectorAll('.question-item');
            
            if (questionElements.length > 0) {
                questionsContainer.innerHTML = '';
                
                questionElements.forEach((questionEl, index) => {
                    const questionText = questionEl.querySelector('input[name$=".QuestionText"]')?.value || 
                                       questionEl.querySelector('input[name$=".Title"]')?.value || 
                                       'Question text';
                    const questionType = questionEl.querySelector('select[name$=".QuestionType"]')?.value || 
                                       questionEl.querySelector('select[name$=".Type"]')?.value || 
                                       'Text';
                    
                    const previewQuestion = document.createElement('div');
                    previewQuestion.className = 'bg-white p-4 rounded-md shadow-sm';
                    
                    previewQuestion.innerHTML = `
                        <h3 class="font-medium mb-2">${index + 1}. ${questionText}</h3>
                        <div class="ml-4">
                            ${getQuestionTypePreview(questionType)}
                        </div>
                    `;
                    
                    questionsContainer.appendChild(previewQuestion);
                });
            } else {
                questionsContainer.innerHTML = '<p class="text-center text-muted-foreground">Add questions to see a preview</p>';
            }
        }
        
        // Generate preview HTML based on question type
        function getQuestionTypePreview(type) {
            switch (type) {
                case 'text':
                    return '<input type="text" class="form-input w-full rounded-md border" placeholder="Text answer" disabled />';
                case 'single-choice':
                    return `
                        <div class="space-y-2">
                            <div class="flex items-center">
                                <input type="radio" disabled class="mr-2" /> Option 1
                            </div>
                            <div class="flex items-center">
                                <input type="radio" disabled class="mr-2" /> Option 2
                            </div>
                            <div class="flex items-center">
                                <input type="radio" disabled class="mr-2" /> Option 3
                            </div>
                        </div>
                    `;
                case 'multiple-choice':
                    return `
                        <div class="space-y-2">
                            <div class="flex items-center">
                                <input type="checkbox" disabled class="mr-2" /> Option 1
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" disabled class="mr-2" /> Option 2
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" disabled class="mr-2" /> Option 3
                            </div>
                        </div>
                    `;
                case 'rating':
                    return `
                        <div class="flex space-x-4">
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>1</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>2</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>3</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>4</div>
                            </div>
                            <div class="text-center">
                                <input type="radio" disabled class="mb-1" />
                                <div>5</div>
                            </div>
                        </div>
                    `;
                default:
                    return '<p class="text-muted-foreground">Preview not available for this question type</p>';
            }
        }
        
        // Add question functionality
        document.getElementById('add-question-btn').addEventListener('click', function() {
            const questionsContainer = document.getElementById('questions-container');
            const questionCount = document.querySelectorAll('.question-item').length;
            
            // Create a new question item with proper indexing
            const newQuestion = document.createElement('div');
            newQuestion.className = 'question-item bg-white shadow-sm rounded-lg border p-4 mb-4';
            newQuestion.setAttribute('data-index', questionCount);
            newQuestion.innerHTML = `
                <div class="flex justify-between mb-4">
                    <h3 class="font-medium">Question ${questionCount + 1}</h3>
                    <div class="flex space-x-2">
                        <button type="button" class="move-up text-gray-500 hover:text-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><polyline points="18 15 12 9 6 15"></polyline></svg>
                        </button>
                        <button type="button" class="move-down text-gray-500 hover:text-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><polyline points="6 9 12 15 18 9"></polyline></svg>
                        </button>
                        <button type="button" class="delete-question text-red-500 hover:text-red-700">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-5 w-5"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path></svg>
                        </button>
                    </div>
                </div>
                
                <div class="space-y-3">
                    <input type="hidden" name="Questions[${questionCount}].Id" id="Questions_${questionCount}__Id" value="${generateUuid()}" />
                    <input type="hidden" name="Questions[${questionCount}].Title" id="Questions_${questionCount}__Title" value="" />
                    <input type="hidden" name="Questions[${questionCount}].Description" id="Questions_${questionCount}__Description" value="" />
                    <input type="hidden" name="Questions[${questionCount}].Type" id="Questions_${questionCount}__Type" value="text" />
                    <input type="hidden" name="Questions[${questionCount}].Required" id="Questions_${questionCount}__Required" value="false" />
                    
                    <div>
                        <label class="block text-sm font-medium mb-1">Question Title</label>
                        <input type="text" class="question-title w-full px-3 py-2 border border-gray-300 rounded-md"
                               value="" 
                               onchange="updateHiddenField(this, 'Questions_${questionCount}__Title')" />
                        <span class="field-validation-valid text-danger text-sm" data-valmsg-for="Questions[${questionCount}].Title" data-valmsg-replace="true"></span>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium mb-1">Question Type</label>
                        <select class="question-type w-full px-3 py-2 border border-gray-300 rounded-md"
                                onchange="updateQuestionType(this, ${questionCount})">
                            <option value="text" selected>Text</option>
                            <option value="single-choice">Single Choice</option>
                            <option value="multiple-choice">Multiple Choice</option>
                            <option value="rating">Rating</option>
                        </select>
                    </div>
                    
                    <div class="options-container hidden">
                        <label class="block text-sm font-medium mb-1">Options</label>
                        <div class="options-list space-y-2">
                            <!-- Options will be added here -->
                        </div>
                        <button type="button" class="add-option mt-2 text-sm text-blue-600">+ Add Option</button>
                    </div>
                    
                    <div class="flex items-center mt-2">
                        <input type="checkbox" class="required-checkbox mr-2" 
                               onchange="updateRequiredField(this, ${questionCount})" />
                        <label class="text-sm">Required</label>
                    </div>
                </div>
            `;
            
            questionsContainer.appendChild(newQuestion);
            
            // Add listeners for new question's buttons
            setupQuestionEventListeners(newQuestion, questionCount);
        });
        
        // Generate UUID for questions
        function generateUuid() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // Setup event listeners for question actions
        function setupQuestionEventListeners(questionElement, index) {
            // Delete question button
            const deleteBtn = questionElement.querySelector('.delete-question');
            if (deleteBtn) {
                deleteBtn.addEventListener('click', function() {
                    questionElement.remove();
                    // Reindex questions
                    reindexQuestions();
                });
            }
            
            // Move up button
            const moveUpBtn = questionElement.querySelector('.move-up');
            if (moveUpBtn) {
                moveUpBtn.addEventListener('click', function() {
                    const prev = questionElement.previousElementSibling;
                    if (prev && prev.classList.contains('question-item')) {
                        questionElement.parentNode.insertBefore(questionElement, prev);
                        reindexQuestions();
                    }
                });
            }
            
            // Move down button
            const moveDownBtn = questionElement.querySelector('.move-down');
            if (moveDownBtn) {
                moveDownBtn.addEventListener('click', function() {
                    const next = questionElement.nextElementSibling;
                    if (next && next.classList.contains('question-item')) {
                        questionElement.parentNode.insertBefore(next, questionElement);
                        reindexQuestions();
                    }
                });
            }
            
            // Add option button
            const addOptionBtn = questionElement.querySelector('.add-option');
            if (addOptionBtn) {
                addOptionBtn.addEventListener('click', function() {
                    const optionsList = questionElement.querySelector('.options-list');
                    const optionCount = optionsList.children.length;
                    
                    const newOption = document.createElement('div');
                    newOption.className = 'flex items-center';
                    newOption.innerHTML = `
                        <input type="hidden" name="Questions[${index}].Options[${optionCount}]" value="" />
                        <input type="text" class="option-input flex-1 px-3 py-1 border border-gray-300 rounded-md"
                               value=""
                               onchange="updateOptionValue(this, ${index}, ${optionCount})" />
                        <button type="button" class="remove-option ml-2 text-red-500">Ã</button>
                    `;
                    
                    optionsList.appendChild(newOption);
                    
                    // Add listener for remove option button
                    const removeBtn = newOption.querySelector('.remove-option');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', function() {
                            if (optionsList.children.length > 2) {
                                newOption.remove();
                                reindexOptions(optionsList, index);
                            }
                        });
                    }
                });
            }
            
            // Question type change
            const typeSelect = questionElement.querySelector('.question-type');
            if (typeSelect) {
                typeSelect.addEventListener('change', function() {
                    const optionsContainer = questionElement.querySelector('.options-container');
                    const hiddenTypeInput = document.getElementById(`Questions_${index}__Type`);
                    
                    // Update hidden field
                    if (hiddenTypeInput) {
                        hiddenTypeInput.value = this.value;
                    }
                    
                    // Show/hide options based on question type
                    if (this.value === 'single-choice' || this.value === 'multiple-choice') {
                        optionsContainer.classList.remove('hidden');
                        
                        // If no options exist, add two default ones
                        const optionsList = optionsContainer.querySelector('.options-list');
                        if (optionsList.children.length === 0) {
                            for (let i = 0; i < 2; i++) {
                                const newOption = document.createElement('div');
                                newOption.className = 'flex items-center';
                                newOption.innerHTML = `
                                    <input type="hidden" name="Questions[${index}].Options[${i}]" value="Option ${i + 1}" />
                                    <input type="text" class="option-input flex-1 px-3 py-1 border border-gray-300 rounded-md"
                                           value="Option ${i + 1}"
                                           onchange="updateOptionValue(this, ${index}, ${i})" />
                                    <button type="button" class="remove-option ml-2 text-red-500">Ã</button>
                                `;
                                
                                optionsList.appendChild(newOption);
                                
                                // Add listener for remove option button
                                const removeBtn = newOption.querySelector('.remove-option');
                                if (removeBtn) {
                                    removeBtn.addEventListener('click', function() {
                                        if (optionsList.children.length > 2) {
                                            newOption.remove();
                                            reindexOptions(optionsList, index);
                                        }
                                    });
                                }
                            }
                        }
                    } else {
                        optionsContainer.classList.add('hidden');
                    }
                });
            }
        }
        
        // Reindex all questions after reordering or deletion
        function reindexQuestions() {
            const questions = document.querySelectorAll('.question-item');
            questions.forEach((question, index) => {
                // Update data-index attribute
                question.setAttribute('data-index', index);
                
                // Update question number in title
                const title = question.querySelector('h3');
                if (title) {
                    title.textContent = `Question ${index + 1}`;
                }
                
                // Update all input names and IDs
                const inputs = question.querySelectorAll('input[name^="Questions["], select[name^="Questions["]');
                inputs.forEach(input => {
                    const name = input.getAttribute('name');
                    const newName = name.replace(/Questions\[\d+\]/, `Questions[${index}]`);
                    input.setAttribute('name', newName);
                    
                    if (input.id) {
                        const newId = input.id.replace(/Questions_\d+_/, `Questions_${index}_`);
                        input.id = newId;
                    }
                });
                
                // Update onchange handlers
                const titleInput = question.querySelector('.question-title');
                if (titleInput) {
                    titleInput.setAttribute('onchange', `updateHiddenField(this, 'Questions_${index}__Title')`);
                }
                
                const typeSelect = question.querySelector('.question-type');
                if (typeSelect) {
                    typeSelect.setAttribute('onchange', `updateQuestionType(this, ${index})`);
                }
                
                const requiredCheckbox = question.querySelector('.required-checkbox');
                if (requiredCheckbox) {
                    requiredCheckbox.setAttribute('onchange', `updateRequiredField(this, ${index})`);
                }
                
                // Update options
                const optionInputs = question.querySelectorAll('.option-input');
                optionInputs.forEach((input, optionIndex) => {
                    input.setAttribute('onchange', `updateOptionValue(this, ${index}, ${optionIndex})`);
                });
            });
        }
        
        // Reindex options within a question
        function reindexOptions(optionsList, questionIndex) {
            const options = optionsList.querySelectorAll('.flex.items-center');
            options.forEach((option, optionIndex) => {
                const hiddenInput = option.querySelector('input[type="hidden"]');
                const textInput = option.querySelector('.option-input');
                
                if (hiddenInput) {
                    hiddenInput.setAttribute('name', `Questions[${questionIndex}].Options[${optionIndex}]`);
                }
                
                if (textInput) {
                    textInput.setAttribute('onchange', `updateOptionValue(this, ${questionIndex}, ${optionIndex})`);
                }
            });
        }
        
        // Helper functions for updating hidden fields
        function updateHiddenField(element, targetId) {
            const hiddenField = document.getElementById(targetId);
            if (hiddenField) {
                hiddenField.value = element.value;
            }
        }
        
        function updateQuestionType(select, index) {
            const hiddenField = document.getElementById(`Questions_${index}__Type`);
            if (hiddenField) {
                hiddenField.value = select.value;
            }
            
            const questionItem = select.closest('.question-item');
            const optionsContainer = questionItem.querySelector('.options-container');
            
            if (select.value === 'single-choice' || select.value === 'multiple-choice') {
                optionsContainer.classList.remove('hidden');
            } else {
                optionsContainer.classList.add('hidden');
            }
        }
        
        function updateRequiredField(checkbox, index) {
            const hiddenField = document.getElementById(`Questions_${index}__Required`);
            if (hiddenField) {
                hiddenField.value = checkbox.checked.toString().toLowerCase();
            }
        }
        
        function updateOptionValue(input, questionIndex, optionIndex) {
            const hiddenInput = input.previousElementSibling;
            if (hiddenInput && hiddenInput.tagName === 'INPUT') {
                hiddenInput.value = input.value;
            }
        }
        
        // Initialize existing questions
        document.addEventListener('DOMContentLoaded', function() {
            const questions = document.querySelectorAll('.question-item');
            questions.forEach((question, index) => {
                setupQuestionEventListeners(question, index);
            });
            
            // Initial state of email settings
            const enableEmail = document.getElementById('enableEmailDelivery');
            const emailSettings = document.getElementById('email-settings');
            if (enableEmail && emailSettings) {
                emailSettings.style.display = enableEmail.checked ? 'block' : 'none';
                
                // Add event listener to toggle email settings visibility
                enableEmail.addEventListener('change', function() {
                    emailSettings.style.display = this.checked ? 'block' : 'none';
                });
            }
        });
    </script>
}
