
@model SurveyApp.WebMvc.Models.CreateSurveyViewModel

@{
    ViewData["Title"] = "Edit Survey";
}

<div class="container mx-auto px-4 py-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-900">Edit Survey</h1>
        <a asp-action="Index" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
            Back to List
        </a>
    </div>

    <form asp-action="Edit" method="post" id="surveyForm">
        <div asp-validation-summary="ModelOnly" class="text-red-500 mb-4"></div>
        <input type="hidden" name="Id" value="@ViewContext.RouteData.Values["id"]" />

        <div class="bg-white shadow-md rounded-lg p-6 mb-6">
            <div class="space-y-4">
                <div>
                    <label asp-for="Title" class="block text-sm font-medium text-gray-700 mb-1">Survey Title</label>
                    <input asp-for="Title" class="w-full px-3 py-2 border border-gray-300 rounded-md" required />
                    <span asp-validation-for="Title" class="text-red-500 text-sm"></span>
                </div>

                <div>
                    <label asp-for="Description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                    <textarea asp-for="Description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md"></textarea>
                    <span asp-validation-for="Description" class="text-red-500 text-sm"></span>
                </div>
            </div>
        </div>

        <div class="bg-white shadow-md rounded-lg p-6 mb-6">
            <h2 class="text-xl font-bold mb-4">Questions</h2>
            <div id="questions-container" class="space-y-4">
                @for (var i = 0; i < Model.Questions.Count; i++)
                {
                    <partial name="_QuestionPartial" model="new Tuple<QuestionViewModel, int>(Model.Questions[i], i)" />
                }
            </div>
            <button type="button" id="add-question" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                Add Question
            </button>
        </div>

        <div class="bg-white shadow-md rounded-lg p-6 mb-6">
            <h2 class="text-xl font-bold mb-4">Delivery Configuration</h2>
            
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Delivery Type</label>
                    <select asp-for="DeliveryConfig.Type" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                        <option value="Manual">Manual</option>
                        <option value="Scheduled">Scheduled</option>
                        <option value="Triggered">Triggered</option>
                    </select>
                </div>
                
                <div id="email-recipients" class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Recipients (one email per line)</label>
                    <textarea id="email-list" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md"></textarea>
                    <div id="email-tags" class="flex flex-wrap gap-2 mt-2">
                        @if (Model.DeliveryConfig?.EmailAddresses != null)
                        {
                            @foreach (var email in Model.DeliveryConfig.EmailAddresses)
                            {
                                <div class="email-tag bg-blue-100 text-blue-800 px-2 py-1 rounded-md flex items-center">
                                    <span>@email</span>
                                    <input type="hidden" name="DeliveryConfig.EmailAddresses" value="@email" />
                                    <button type="button" class="ml-2 text-blue-500 hover:text-blue-700 remove-email">&times;</button>
                                </div>
                            }
                        }
                    </div>
                    <button type="button" id="add-emails" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors text-sm">
                        Add Emails
                    </button>
                </div>
                
                <div id="schedule-config" class="space-y-4 @(Model.DeliveryConfig?.Type != "Scheduled" ? "hidden" : "")">
                    <h3 class="text-lg font-medium">Schedule Configuration</h3>
                    
                    <div>
                        <label asp-for="DeliveryConfig.Schedule.Frequency" class="block text-sm font-medium text-gray-700 mb-1">Frequency</label>
                        <select asp-for="DeliveryConfig.Schedule.Frequency" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="daily">Daily</option>
                            <option value="weekly">Weekly</option>
                            <option value="monthly">Monthly</option>
                        </select>
                    </div>
                    
                    <div class="day-of-month @(Model.DeliveryConfig?.Schedule?.Frequency != "monthly" ? "hidden" : "")">
                        <label asp-for="DeliveryConfig.Schedule.DayOfMonth" class="block text-sm font-medium text-gray-700 mb-1">Day of Month</label>
                        <select asp-for="DeliveryConfig.Schedule.DayOfMonth" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            @for (int i = 1; i <= 28; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                    
                    <div class="day-of-week @(Model.DeliveryConfig?.Schedule?.Frequency != "weekly" ? "hidden" : "")">
                        <label asp-for="DeliveryConfig.Schedule.DayOfWeek" class="block text-sm font-medium text-gray-700 mb-1">Day of Week</label>
                        <select asp-for="DeliveryConfig.Schedule.DayOfWeek" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="1">Monday</option>
                            <option value="2">Tuesday</option>
                            <option value="3">Wednesday</option>
                            <option value="4">Thursday</option>
                            <option value="5">Friday</option>
                            <option value="6">Saturday</option>
                            <option value="0">Sunday</option>
                        </select>
                    </div>
                    
                    <div>
                        <label asp-for="DeliveryConfig.Schedule.Time" class="block text-sm font-medium text-gray-700 mb-1">Time</label>
                        <input type="time" asp-for="DeliveryConfig.Schedule.Time" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    </div>
                    
                    <div>
                        <label asp-for="DeliveryConfig.Schedule.StartDate" class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                        <input type="date" asp-for="DeliveryConfig.Schedule.StartDate" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    </div>
                </div>
                
                <div id="trigger-config" class="space-y-4 @(Model.DeliveryConfig?.Type != "Triggered" ? "hidden" : "")">
                    <h3 class="text-lg font-medium">Trigger Configuration</h3>
                    
                    <div>
                        <label asp-for="DeliveryConfig.Trigger.Type" class="block text-sm font-medium text-gray-700 mb-1">Trigger Type</label>
                        <select asp-for="DeliveryConfig.Trigger.Type" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            <option value="ticket-closed">Ticket Closed</option>
                            <option value="ticket-created">Ticket Created</option>
                            <option value="customer-created">Customer Created</option>
                        </select>
                    </div>
                    
                    <div>
                        <label asp-for="DeliveryConfig.Trigger.DelayHours" class="block text-sm font-medium text-gray-700 mb-1">Delay (hours)</label>
                        <input type="number" asp-for="DeliveryConfig.Trigger.DelayHours" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    </div>
                    
                    <div class="flex items-center">
                        <input type="checkbox" asp-for="DeliveryConfig.Trigger.SendAutomatically" class="mr-2" />
                        <label asp-for="DeliveryConfig.Trigger.SendAutomatically" class="text-sm font-medium text-gray-700">Send Automatically</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="flex justify-between">
            <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                Save Changes
            </button>
            <a asp-action="Details" asp-route-id="@ViewContext.RouteData.Values["id"]" class="px-6 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors">
                Cancel
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Question management
            const questionsContainer = document.getElementById('questions-container');
            const addQuestionBtn = document.getElementById('add-question');
            
            // Add question
            addQuestionBtn.addEventListener('click', function() {
                const index = document.querySelectorAll('.question-item').length;
                fetch(`/Survey/AddQuestion?index=${index}`)
                    .then(response => response.text())
                    .then(html => {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        questionsContainer.appendChild(tempDiv.firstElementChild);
                        initQuestionEvents();
                    });
            });
            
            function initQuestionEvents() {
                // Delete question
                document.querySelectorAll('.delete-question').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const questionItem = this.closest('.question-item');
                        questionItem.remove();
                        updateQuestionIndices();
                    });
                });
                
                // Move question up
                document.querySelectorAll('.move-up').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const questionItem = this.closest('.question-item');
                        const prevQuestion = questionItem.previousElementSibling;
                        if (prevQuestion) {
                            questionsContainer.insertBefore(questionItem, prevQuestion);
                            updateQuestionIndices();
                        }
                    });
                });
                
                // Move question down
                document.querySelectorAll('.move-down').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const questionItem = this.closest('.question-item');
                        const nextQuestion = questionItem.nextElementSibling;
                        if (nextQuestion) {
                            questionsContainer.insertBefore(nextQuestion, questionItem);
                            updateQuestionIndices();
                        }
                    });
                });
                
                // Add option
                document.querySelectorAll('.add-option').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const optionsList = this.previousElementSibling;
                        const questionIndex = this.closest('.question-item').getAttribute('data-index');
                        const optionIndex = optionsList.children.length;
                        
                        const optionDiv = document.createElement('div');
                        optionDiv.className = 'flex items-center';
                        optionDiv.innerHTML = `
                            <input type="hidden" name="Questions[${questionIndex}].Options[${optionIndex}]" value="New Option" />
                            <input type="text" class="option-input flex-1 px-3 py-1 border border-gray-300 rounded-md" 
                                   value="New Option" 
                                   onchange="updateOptionValue(this, ${questionIndex}, ${optionIndex})" />
                            <button type="button" class="remove-option ml-2 text-red-500">×</button>
                        `;
                        
                        optionsList.appendChild(optionDiv);
                        initOptionRemoval();
                    });
                });
                
                // Remove option
                initOptionRemoval();
                
                // Update question type
                document.querySelectorAll('.question-type').forEach(select => {
                    select.addEventListener('change', function() {
                        const questionItem = this.closest('.question-item');
                        const index = questionItem.getAttribute('data-index');
                        const optionsContainer = questionItem.querySelector('.options-container');
                        const typeInput = document.getElementById(`Questions_${index}__Type`);
                        
                        typeInput.value = this.value;
                        
                        if (this.value === 'Text' || this.value === 'Rating') {
                            optionsContainer.classList.add('hidden');
                        } else {
                            optionsContainer.classList.remove('hidden');
                        }
                    });
                });
                
                // Update required field
                document.querySelectorAll('.required-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', function() {
                        const questionItem = this.closest('.question-item');
                        const index = questionItem.getAttribute('data-index');
                        const requiredInput = document.getElementById(`Questions_${index}__Required`);
                        
                        requiredInput.value = this.checked.toString().toLowerCase();
                    });
                });
            }
            
            function initOptionRemoval() {
                document.querySelectorAll('.remove-option').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const optionDiv = this.parentElement;
                        optionDiv.remove();
                        updateOptionIndices(optionDiv.closest('.options-list'));
                    });
                });
            }
            
            function updateQuestionIndices() {
                const questionItems = document.querySelectorAll('.question-item');
                questionItems.forEach((item, index) => {
                    item.setAttribute('data-index', index);
                    item.querySelector('h3').textContent = `Question ${index + 1}`;
                    
                    // Update all name and id attributes
                    updateElementAttributes(item, 'name', /Questions\[\d+\]/, `Questions[${index}]`);
                    updateElementAttributes(item, 'id', /Questions_\d+__/, `Questions_${index}__`);
                    updateElementAttributes(item, 'data-valmsg-for', /Questions\[\d+\]/, `Questions[${index}]`);
                    
                    // Update onchange handlers
                    item.querySelectorAll('[onchange]').forEach(el => {
                        if (el.hasAttribute('onchange')) {
                            const onchange = el.getAttribute('onchange');
                            el.setAttribute('onchange', onchange.replace(/\d+/, index));
                        }
                    });
                });
            }
            
            function updateOptionIndices(optionsList) {
                const options = optionsList.querySelectorAll('.flex.items-center');
                const questionIndex = optionsList.closest('.question-item').getAttribute('data-index');
                
                options.forEach((option, index) => {
                    const hiddenInput = option.querySelector('input[type="hidden"]');
                    const textInput = option.querySelector('.option-input');
                    
                    hiddenInput.name = `Questions[${questionIndex}].Options[${index}]`;
                    textInput.setAttribute('onchange', `updateOptionValue(this, ${questionIndex}, ${index})`);
                });
            }
            
            function updateElementAttributes(container, attribute, pattern, replacement) {
                container.querySelectorAll(`[${attribute}]`).forEach(el => {
                    const attrValue = el.getAttribute(attribute);
                    if (pattern.test(attrValue)) {
                        el.setAttribute(attribute, attrValue.replace(pattern, replacement));
                    }
                });
            }
            
            // Initialize all event handlers
            initQuestionEvents();
            
            // Email tags functionality
            const emailList = document.getElementById('email-list');
            const emailTags = document.getElementById('email-tags');
            const addEmailsBtn = document.getElementById('add-emails');
            
            addEmailsBtn.addEventListener('click', function() {
                const emails = emailList.value.split(/[\n,;]+/).map(e => e.trim()).filter(e => e);
                
                emails.forEach(email => {
                    if (isValidEmail(email) && !emailExists(email)) {
                        addEmailTag(email);
                    }
                });
                
                emailList.value = '';
            });
            
            function addEmailTag(email) {
                const tag = document.createElement('div');
                tag.className = 'email-tag bg-blue-100 text-blue-800 px-2 py-1 rounded-md flex items-center';
                tag.innerHTML = `
                    <span>${email}</span>
                    <input type="hidden" name="DeliveryConfig.EmailAddresses" value="${email}" />
                    <button type="button" class="ml-2 text-blue-500 hover:text-blue-700 remove-email">&times;</button>
                `;
                
                emailTags.appendChild(tag);
                
                tag.querySelector('.remove-email').addEventListener('click', function() {
                    tag.remove();
                });
            }
            
            function emailExists(email) {
                const inputs = emailTags.querySelectorAll('input[type="hidden"]');
                return Array.from(inputs).some(input => input.value === email);
            }
            
            function isValidEmail(email) {
                return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
            }
            
            // Remove email tags
            document.querySelectorAll('.remove-email').forEach(btn => {
                btn.addEventListener('click', function() {
                    this.closest('.email-tag').remove();
                });
            });
            
            // Delivery type toggling
            const deliveryTypeSelect = document.querySelector('[name="DeliveryConfig.Type"]');
            const scheduleConfig = document.getElementById('schedule-config');
            const triggerConfig = document.getElementById('trigger-config');
            
            deliveryTypeSelect.addEventListener('change', function() {
                if (this.value === 'Scheduled') {
                    scheduleConfig.classList.remove('hidden');
                    triggerConfig.classList.add('hidden');
                } else if (this.value === 'Triggered') {
                    scheduleConfig.classList.add('hidden');
                    triggerConfig.classList.remove('hidden');
                } else {
                    scheduleConfig.classList.add('hidden');
                    triggerConfig.classList.add('hidden');
                }
            });
            
            // Frequency-dependent fields
            const frequencySelect = document.querySelector('[name="DeliveryConfig.Schedule.Frequency"]');
            const dayOfMonthDiv = document.querySelector('.day-of-month');
            const dayOfWeekDiv = document.querySelector('.day-of-week');
            
            frequencySelect.addEventListener('change', function() {
                if (this.value === 'monthly') {
                    dayOfMonthDiv.classList.remove('hidden');
                    dayOfWeekDiv.classList.add('hidden');
                } else if (this.value === 'weekly') {
                    dayOfMonthDiv.classList.add('hidden');
                    dayOfWeekDiv.classList.remove('hidden');
                } else {
                    dayOfMonthDiv.classList.add('hidden');
                    dayOfWeekDiv.classList.add('hidden');
                }
            });
        });
        
        // Helper functions for questions
        function updateHiddenField(input, targetId) {
            document.getElementById(targetId).value = input.value;
        }
        
        function updateQuestionType(select, index) {
            const typeInput = document.getElementById(`Questions_${index}__Type`);
            typeInput.value = select.value;
            
            const optionsContainer = select.closest('.question-item').querySelector('.options-container');
            if (select.value === 'Text' || select.value === 'Rating') {
                optionsContainer.classList.add('hidden');
            } else {
                optionsContainer.classList.remove('hidden');
            }
        }
        
        function updateOptionValue(input, questionIndex, optionIndex) {
            const hiddenInput = input.previousElementSibling;
            hiddenInput.value = input.value;
        }
        
        function updateRequiredField(checkbox, index) {
            const requiredInput = document.getElementById(`Questions_${index}__Required`);
            requiredInput.value = checkbox.checked.toString().toLowerCase();
        }
    </script>
}
