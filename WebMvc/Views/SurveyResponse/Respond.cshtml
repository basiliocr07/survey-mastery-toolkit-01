@model SurveyApp.WebMvc.Models.SurveyResponseViewModel

@{
    ViewData["Title"] = "Responder Encuesta";
}

<div class="container mx-auto px-4 py-8">
    <div class="max-w-3xl mx-auto">
        <div class="bg-white shadow-md rounded-lg p-6 mb-6">
            <h1 class="text-2xl font-bold mb-2">@Model.Title</h1>
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <p class="text-gray-600 mb-6">@Model.Description</p>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <span class="block sm:inline">@TempData["ErrorMessage"]</span>
                </div>
            }

            <form method="post" asp-action="Submit" asp-route-id="@Model.SurveyId" id="surveyResponseForm">
                <input type="hidden" name="SurveyId" value="@Model.SurveyId" />
                
                <div class="mb-6">
                    <h2 class="text-lg font-semibold mb-4">Sus datos</h2>
                    <div class="mb-4">
                        <label asp-for="RespondentName" class="block text-gray-700 font-medium mb-2"></label>
                        <input asp-for="RespondentName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <span asp-validation-for="RespondentName" class="text-red-500 text-sm"></span>
                    </div>
                    <div class="mb-4">
                        <label asp-for="RespondentEmail" class="block text-gray-700 font-medium mb-2"></label>
                        <input asp-for="RespondentEmail" type="email" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <span asp-validation-for="RespondentEmail" class="text-red-500 text-sm"></span>
                    </div>
                </div>

                <div class="space-y-8">
                    <h2 class="text-lg font-semibold mb-4">Preguntas</h2>

                    @for (int i = 0; i < Model.Questions.Count; i++)
                    {
                        var question = Model.Questions[i];
                        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200" data-question-id="@question.Id">
                            <h3 class="font-medium mb-2">
                                <span class="mr-2">@(i + 1).</span>
                                @question.Title
                                @if (question.Required)
                                {
                                    <span class="text-red-500">*</span>
                                }
                            </h3>

                            @if (!string.IsNullOrEmpty(question.Description))
                            {
                                <p class="text-gray-600 mb-4 pl-6">@question.Description</p>
                            }

                            @if (question.Type == "text")
                            {
                                <div class="mt-3">
                                    <textarea name="Answers[@question.Id]" rows="3" 
                                              class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                              @(question.Required ? "required data-val=\"true\" data-val-required=\"Esta pregunta es obligatoria\"" : "")></textarea>
                                    <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]"></span>
                                </div>
                            }
                            else if (question.Type == "single-choice" && question.Options != null)
                            {
                                <div class="mt-3 space-y-2">
                                    @foreach (var option in question.Options)
                                    {
                                        <div class="flex items-center">
                                            <input type="radio" id="q@(question.Id)_@option.GetHashCode()" 
                                                   name="Answers[@question.Id]" value="@option" 
                                                   class="mr-2" 
                                                   @(question.Required ? "required data-val=\"true\" data-val-required=\"Esta pregunta es obligatoria\"" : "") />
                                            <label for="q@(question.Id)_@option.GetHashCode()">@option</label>
                                        </div>
                                    }
                                    <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]"></span>
                                </div>
                            }
                            else if (question.Type == "multiple-choice" && question.Options != null)
                            {
                                <div class="mt-3 space-y-2">
                                    <input type="hidden" name="Answers[@question.Id]" value="" /> <!-- Para asegurar que se envÃ­a el campo incluso si no se selecciona nada -->
                                    @foreach (var option in question.Options)
                                    {
                                        <div class="flex items-center">
                                            <input type="checkbox" id="q@(question.Id)_@option.GetHashCode()" 
                                                   name="Answers[@question.Id]" value="@option" 
                                                   class="mr-2 checkbox-group-@question.Id" />
                                            <label for="q@(question.Id)_@option.GetHashCode()">@option</label>
                                        </div>
                                    }
                                    @if (question.Required)
                                    {
                                        <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]" id="error-@question.Id"></span>
                                    }
                                </div>
                            }
                            else if (question.Type == "rating")
                            {
                                <div class="mt-3">
                                    <div class="space-y-3">
                                        <div class="star-labels grid grid-cols-5 text-xs text-gray-500 mb-1">
                                            <div class="text-center">Extremely Dissatisfied</div>
                                            <div class="text-center">Dissatisfied</div>
                                            <div class="text-center">Neutral</div>
                                            <div class="text-center">Satisfied</div>
                                            <div class="text-center">Extremely Satisfied</div>
                                        </div>
                                        
                                        <div class="star-rating flex justify-between">
                                            @for (int rating = 1; rating <= 5; rating++)
                                            {
                                                <div class="text-center">
                                                    <input type="radio" 
                                                           id="q@(question.Id)_star@(rating)" 
                                                           name="Answers[@question.Id]" 
                                                           value="@rating" 
                                                           class="sr-only" 
                                                           @(question.Required ? "required data-val=\"true\" data-val-required=\"Esta pregunta es obligatoria\"" : "") />
                                                    <label for="q@(question.Id)_star@(rating)" class="cursor-pointer block">
                                                        <svg class="w-10 h-10 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                                        </svg>
                                                        <span class="sr-only">@rating @(rating == 1 ? "estrella" : "estrellas")</span>
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]"></span>
                                </div>
                            }
                            else if (question.Type == "nps")
                            {
                                <div class="mt-3">
                                    <div class="space-y-4">
                                        <div class="grid grid-cols-11 gap-1 w-full">
                                            @for (int rating = 0; rating <= 10; rating++)
                                            {
                                                <div class="text-center">
                                                    <input type="radio" 
                                                           id="q@(question.Id)_nps@(rating)" 
                                                           name="Answers[@question.Id]" 
                                                           value="@rating" 
                                                           class="sr-only" 
                                                           @(question.Required ? "required data-val=\"true\" data-val-required=\"Esta pregunta es obligatoria\"" : "") />
                                                    <label for="q@(question.Id)_nps@(rating)" 
                                                           class="flex items-center justify-center h-10 rounded-md cursor-pointer border hover:bg-gray-100">
                                                        @rating
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                        <div class="flex justify-between text-sm text-gray-500 px-1">
                                            <div>No es probable</div>
                                            <div>Neutral</div>
                                            <div>Muy probable</div>
                                        </div>
                                    </div>
                                    <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]"></span>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="mt-8">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded">
                        Enviar Respuestas
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('surveyResponseForm');
            
            // Para validar grupos de checkboxes requeridos
            const requiredCheckboxGroups = document.querySelectorAll('[data-question-id]');
            requiredCheckboxGroups.forEach(group => {
                const questionId = group.getAttribute('data-question-id');
                const checkboxes = group.querySelectorAll('.checkbox-group-' + questionId);
                const errorSpan = document.getElementById('error-' + questionId);
                
                if (checkboxes.length > 0 && errorSpan) {
                    checkboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', function() {
                            validateCheckboxGroup(questionId, checkboxes, errorSpan);
                        });
                    });
                }
            });
            
            function validateCheckboxGroup(questionId, checkboxes, errorSpan) {
                const isChecked = Array.from(checkboxes).some(cb => cb.checked);
                if (!isChecked) {
                    errorSpan.textContent = 'Por favor, seleccione al menos una opciÃ³n';
                } else {
                    errorSpan.textContent = '';
                }
                return isChecked;
            }
            
            form.addEventListener('submit', function(e) {
                let isValid = true;
                
                // Validar grupos de checkboxes requeridos
                requiredCheckboxGroups.forEach(group => {
                    const questionId = group.getAttribute('data-question-id');
                    const isRequired = group.querySelector('h3 span.text-red-500') !== null;
                    
                    if (isRequired) {
                        const checkboxes = group.querySelectorAll('.checkbox-group-' + questionId);
                        const errorSpan = document.getElementById('error-' + questionId);
                        
                        if (checkboxes.length > 0 && errorSpan) {
                            const valid = validateCheckboxGroup(questionId, checkboxes, errorSpan);
                            if (!valid) isValid = false;
                        }
                    }
                });
                
                if (!isValid) {
                    e.preventDefault();
                    // Scroll to the first error
                    const firstError = document.querySelector('.field-validation-error:not(:empty)');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            });
            
            // Star rating functionality
            const starLabels = document.querySelectorAll('input[type="radio"][id^="q"][id*="_star"]');
            starLabels.forEach(function(radio) {
                const label = radio.nextElementSibling;
                if (label) {
                    radio.addEventListener('change', function() {
                        // Reset all stars
                        const questionId = this.id.split('_')[0];
                        const stars = document.querySelectorAll(`input[id^="${questionId}_star"]`);
                        stars.forEach(function(s) {
                            const starLabel = s.nextElementSibling;
                            if (starLabel) {
                                starLabel.querySelector('svg').classList.remove('text-yellow-400');
                                starLabel.querySelector('svg').classList.remove('fill-yellow-400');
                                starLabel.querySelector('svg').classList.add('text-gray-300');
                            }
                        });
                        
                        // Highlight selected stars
                        const rating = parseInt(this.value);
                        for (let i = 1; i <= rating; i++) {
                            const starToHighlight = document.querySelector(`#${questionId}_star${i}`);
                            if (starToHighlight) {
                                const starLabel = starToHighlight.nextElementSibling;
                                if (starLabel) {
                                    starLabel.querySelector('svg').classList.remove('text-gray-300');
                                    starLabel.querySelector('svg').classList.add('text-yellow-400');
                                    starLabel.querySelector('svg').classList.add('fill-yellow-400');
                                }
                            }
                        }
                    });
                }
            });
            
            // NPS functionality
            const npsLabels = document.querySelectorAll('input[type="radio"][id^="q"][id*="_nps"]');
            npsLabels.forEach(function(radio) {
                const label = radio.nextElementSibling;
                if (label) {
                    radio.addEventListener('change', function() {
                        // Reset all NPS buttons
                        const questionId = this.id.split('_')[0];
                        const buttons = document.querySelectorAll(`input[id^="${questionId}_nps"]`);
                        buttons.forEach(function(b) {
                            const buttonLabel = b.nextElementSibling;
                            if (buttonLabel) {
                                buttonLabel.classList.remove('bg-blue-500');
                                buttonLabel.classList.remove('text-white');
                            }
                        });
                        
                        // Highlight selected button
                        label.classList.add('bg-blue-500');
                        label.classList.add('text-white');
                    });
                }
            });
        });
    </script>
}
