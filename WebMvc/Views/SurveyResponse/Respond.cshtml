
@model SurveyApp.WebMvc.Models.SurveyResponseViewModel

@{
    ViewData["Title"] = "Responder Encuesta";
}

<div class="container mx-auto px-4 py-8">
    <div class="max-w-3xl mx-auto">
        <div class="bg-white shadow-md rounded-lg p-6 mb-6">
            <h1 class="text-2xl font-bold mb-2">@Model.Title</h1>
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <p class="text-gray-600 mb-6">@Model.Description</p>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <span class="block sm:inline">@TempData["ErrorMessage"]</span>
                </div>
            }

            <form method="post" asp-action="Submit" asp-route-id="@Model.SurveyId" id="surveyResponseForm">
                <input type="hidden" name="SurveyId" value="@Model.SurveyId" />
                
                <div class="mb-6">
                    <h2 class="text-lg font-semibold mb-4">Sus datos</h2>
                    <div class="mb-4">
                        <label asp-for="RespondentName" class="block text-gray-700 font-medium mb-2"></label>
                        <input asp-for="RespondentName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <span asp-validation-for="RespondentName" class="text-red-500 text-sm"></span>
                    </div>
                    <div class="mb-4">
                        <label asp-for="RespondentEmail" class="block text-gray-700 font-medium mb-2"></label>
                        <input asp-for="RespondentEmail" type="email" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <span asp-validation-for="RespondentEmail" class="text-red-500 text-sm"></span>
                    </div>
                </div>

                <div class="space-y-8">
                    <h2 class="text-lg font-semibold mb-4">Preguntas</h2>

                    @for (int i = 0; i < Model.Questions.Count; i++)
                    {
                        var question = Model.Questions[i];
                        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200" data-question-id="@question.Id">
                            <h3 class="font-medium mb-2">
                                <span class="mr-2">@(i + 1).</span>
                                @question.Title
                                @if (question.Required)
                                {
                                    <span class="text-red-500">*</span>
                                }
                            </h3>

                            @if (!string.IsNullOrEmpty(question.Description))
                            {
                                <p class="text-gray-600 mb-4 pl-6">@question.Description</p>
                            }

                            @if (question.Type == "text")
                            {
                                <div class="mt-3">
                                    <textarea name="Answers[@question.Id]" rows="3" 
                                              class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                              @(question.Required ? "required data-val=\"true\" data-val-required=\"Esta pregunta es obligatoria\"" : "")></textarea>
                                    <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]"></span>
                                </div>
                            }
                            else if (question.Type == "single-choice" && question.Options != null)
                            {
                                <div class="mt-3 space-y-2">
                                    @foreach (var option in question.Options)
                                    {
                                        <div class="flex items-center">
                                            <input type="radio" id="q@(question.Id)_@option.GetHashCode()" 
                                                   name="Answers[@question.Id]" value="@option" 
                                                   class="mr-2" 
                                                   @(question.Required ? "required data-val=\"true\" data-val-required=\"Esta pregunta es obligatoria\"" : "") />
                                            <label for="q@(question.Id)_@option.GetHashCode()">@option</label>
                                        </div>
                                    }
                                    <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]"></span>
                                </div>
                            }
                            else if (question.Type == "multiple-choice" && question.Options != null)
                            {
                                <div class="mt-3 space-y-2">
                                    <input type="hidden" name="Answers[@question.Id]" value="" /> <!-- Para asegurar que se envía el campo incluso si no se selecciona nada -->
                                    @foreach (var option in question.Options)
                                    {
                                        <div class="flex items-center">
                                            <input type="checkbox" id="q@(question.Id)_@option.GetHashCode()" 
                                                   name="Answers[@question.Id]" value="@option" 
                                                   class="mr-2 checkbox-group-@question.Id" />
                                            <label for="q@(question.Id)_@option.GetHashCode()">@option</label>
                                        </div>
                                    }
                                    @if (question.Required)
                                    {
                                        <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]" id="error-@question.Id"></span>
                                    }
                                </div>
                            }
                            else if (question.Type == "rating")
                            {
                                <div class="mt-3">
                                    <div class="flex space-x-4">
                                        @for (int rating = 1; rating <= 5; rating++)
                                        {
                                            <div class="text-center">
                                                <input type="radio" id="q@(question.Id)_@rating" 
                                                       name="Answers[@question.Id]" value="@rating" 
                                                       @(question.Required ? "required data-val=\"true\" data-val-required=\"Esta pregunta es obligatoria\"" : "") 
                                                       class="hidden peer" />
                                                <label for="q@(question.Id)_@rating" class="inline-block w-10 h-10 rounded-full border-2 border-gray-300 flex items-center justify-center cursor-pointer peer-checked:bg-blue-500 peer-checked:text-white peer-checked:border-blue-500 hover:bg-gray-100">
                                                    @rating
                                                </label>
                                            </div>
                                        }
                                    </div>
                                    <span class="field-validation-error text-red-500 text-sm" data-valmsg-for="Answers[@question.Id]"></span>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="mt-8">
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded">
                        Enviar Respuestas
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('surveyResponseForm');
            
            // Para validar grupos de checkboxes requeridos
            const requiredCheckboxGroups = document.querySelectorAll('[data-question-id]');
            requiredCheckboxGroups.forEach(group => {
                const questionId = group.getAttribute('data-question-id');
                const checkboxes = group.querySelectorAll('.checkbox-group-' + questionId);
                const errorSpan = document.getElementById('error-' + questionId);
                
                if (checkboxes.length > 0 && errorSpan) {
                    checkboxes.forEach(checkbox => {
                        checkbox.addEventListener('change', function() {
                            validateCheckboxGroup(questionId, checkboxes, errorSpan);
                        });
                    });
                }
            });
            
            function validateCheckboxGroup(questionId, checkboxes, errorSpan) {
                const isChecked = Array.from(checkboxes).some(cb => cb.checked);
                if (!isChecked) {
                    errorSpan.textContent = 'Por favor, seleccione al menos una opción';
                } else {
                    errorSpan.textContent = '';
                }
                return isChecked;
            }
            
            form.addEventListener('submit', function(e) {
                let isValid = true;
                
                // Validar grupos de checkboxes requeridos
                requiredCheckboxGroups.forEach(group => {
                    const questionId = group.getAttribute('data-question-id');
                    const isRequired = group.querySelector('h3 span.text-red-500') !== null;
                    
                    if (isRequired) {
                        const checkboxes = group.querySelectorAll('.checkbox-group-' + questionId);
                        const errorSpan = document.getElementById('error-' + questionId);
                        
                        if (checkboxes.length > 0 && errorSpan) {
                            const valid = validateCheckboxGroup(questionId, checkboxes, errorSpan);
                            if (!valid) isValid = false;
                        }
                    }
                });
                
                if (!isValid) {
                    e.preventDefault();
                    // Scroll to the first error
                    const firstError = document.querySelector('.field-validation-error:not(:empty)');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            });
            
            // Serializar los datos del formulario antes de enviar
            form.addEventListener('submit', function(e) {
                if (!e.defaultPrevented) {
                    const formData = new FormData(form);
                    const answers = {};
                    
                    // Procesar respuestas de opción múltiple
                    for (let [key, value] of formData.entries()) {
                        if (key.startsWith('Answers[') && key.endsWith(']')) {
                            const questionId = key.substring(8, key.length - 1);
                            if (answers[questionId]) {
                                if (!Array.isArray(answers[questionId])) {
                                    answers[questionId] = [answers[questionId]];
                                }
                                answers[questionId].push(value);
                            } else {
                                answers[questionId] = value;
                            }
                        }
                    }
                    
                    // Asignar respuestas al campo oculto (si se necesita)
                    // Si estás usando un enfoque diferente para manejar los datos, ajusta según sea necesario
                }
            });
        });
    </script>
}
