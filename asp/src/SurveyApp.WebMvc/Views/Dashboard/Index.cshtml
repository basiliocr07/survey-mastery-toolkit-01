
@model SurveyApp.WebMvc.Models.DashboardViewModel
@{
    ViewData["Title"] = "Panel de Control";
    Layout = "_ClientLayout";
}

<div class="min-h-screen bg-background">
    <div class="container mx-auto pt-6 pb-10 px-4 md:px-6">
        <h1 class="text-3xl font-bold tracking-tight mb-6">Panel de Control</h1>
        
        <div class="card shadow-sm">
            <div class="card-header pb-2">
                <div class="card-title text-xl">Vista Rápida de Elementos Recientes</div>
            </div>
            <div class="p-0">
                <!-- Survey Section -->
                <div class="border-b last:border-b-0">
                    <div class="w-full px-6 py-4 flex justify-between items-center hover:bg-gray-50 transition-colors cursor-pointer" 
                         id="toggle-surveys" onclick="toggleSection('surveys')">
                        <div>
                            <div class="flex items-center gap-2 mb-1">
                                <h3 class="font-medium">Encuestas</h3>
                                @if (Model.LatestSurvey != null)
                                {
                                    <span class="status-badge @GetStatusBadgeClass(Model.LatestSurvey.Status)">
                                        @GetStatusText(Model.LatestSurvey.Status)
                                    </span>
                                }
                            </div>
                            @if (Model.LatestSurvey != null)
                            {
                                <p class="font-semibold">@Model.LatestSurvey.Title</p>
                                <p class="text-xs text-muted-foreground">
                                    Creada @Model.LatestSurvey.CreatedAt.ToString("dd MMM yyyy") • @Model.LatestSurvey.Responses respuestas
                                </p>
                            }
                            else
                            {
                                <p class="text-gray-500">No hay encuestas disponibles</p>
                            }
                        </div>
                        <i class="fas fa-chevron-down text-gray-400 transition-transform" id="surveys-icon"></i>
                    </div>
                    <div class="bg-gray-50 px-6 py-3 grid transition-all hidden" id="surveys-content">
                        <div class="overflow-hidden">
                            <div class="space-y-3">
                                <h4 class="text-sm font-medium mb-2">Últimas 5 respuestas</h4>
                                @if (Model.RecentSurveyResponses != null && Model.RecentSurveyResponses.Any())
                                {
                                    <div class="space-y-2">
                                        @foreach (var response in Model.RecentSurveyResponses)
                                        {
                                            <div class="bg-white p-3 rounded border text-sm">
                                                <div class="flex justify-between">
                                                    <span class="font-medium">@response.RespondentName</span>
                                                    <span class="text-gray-500 text-xs">@response.SubmittedAt.ToString("dd MMM yyyy")</span>
                                                </div>
                                                <p class="text-gray-600">@response.SurveyTitle</p>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-sm text-gray-500">No hay respuestas recientes</p>
                                }
                                <div class="mt-3 text-right">
                                    <a href="/Surveys" class="text-sm text-blue-600 hover:underline inline-flex items-center">
                                        Ver todas las encuestas <i class="fas fa-arrow-right ml-1 text-xs"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Suggestions Section -->
                <div class="border-b last:border-b-0">
                    <div class="w-full px-6 py-4 flex justify-between items-center hover:bg-gray-50 transition-colors cursor-pointer"
                         id="toggle-suggestions" onclick="toggleSection('suggestions')">
                        <div>
                            <div class="flex items-center gap-2 mb-1">
                                <h3 class="font-medium">Sugerencias</h3>
                                @if (Model.LatestSuggestion != null)
                                {
                                    <span class="status-badge @GetStatusBadgeClass(Model.LatestSuggestion.Status)">
                                        @GetStatusText(Model.LatestSuggestion.Status)
                                    </span>
                                }
                            </div>
                            @if (Model.LatestSuggestion != null)
                            {
                                <p class="font-semibold">@Model.LatestSuggestion.Content</p>
                                <p class="text-xs text-muted-foreground">
                                    De @Model.LatestSuggestion.CustomerName • @Model.LatestSuggestion.CreatedAt.ToString("dd MMM yyyy")
                                </p>
                            }
                            else
                            {
                                <p class="text-gray-500">No hay sugerencias disponibles</p>
                            }
                        </div>
                        <i class="fas fa-chevron-down text-gray-400 transition-transform" id="suggestions-icon"></i>
                    </div>
                    <div class="bg-gray-50 px-6 py-3 grid transition-all hidden" id="suggestions-content">
                        <div class="overflow-hidden">
                            <div class="space-y-3">
                                <h4 class="text-sm font-medium mb-2">Últimas 5 sugerencias</h4>
                                @if (Model.RecentSuggestions != null && Model.RecentSuggestions.Any())
                                {
                                    <div class="space-y-2">
                                        @foreach (var suggestion in Model.RecentSuggestions)
                                        {
                                            <div class="bg-white p-3 rounded border text-sm">
                                                <div class="flex justify-between">
                                                    <span class="font-medium">@suggestion.CustomerName</span>
                                                    <span class="text-gray-500 text-xs">@suggestion.CreatedAt.ToString("dd MMM yyyy")</span>
                                                </div>
                                                <p class="text-gray-600">
                                                    @(suggestion.Content.Length > 60 
                                                        ? $"{suggestion.Content.Substring(0, 60)}..."
                                                        : suggestion.Content)
                                                </p>
                                                <div class="flex justify-end mt-2">
                                                    <span class="status-badge @GetStatusBadgeClass(suggestion.Status)">
                                                        @GetStatusText(suggestion.Status)
                                                    </span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-sm text-gray-500">No hay sugerencias recientes</p>
                                }
                                <div class="mt-3 text-right">
                                    <a href="/Suggestions" class="text-sm text-blue-600 hover:underline inline-flex items-center">
                                        Ver todas las sugerencias <i class="fas fa-arrow-right ml-1 text-xs"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Requirements Section -->
                <div class="border-b last:border-b-0">
                    <div class="w-full px-6 py-4 flex justify-between items-center hover:bg-gray-50 transition-colors cursor-pointer"
                         id="toggle-requirements" onclick="toggleSection('requirements')">
                        <div>
                            <div class="flex items-center gap-2 mb-1">
                                <h3 class="font-medium">Requerimientos</h3>
                                @if (Model.LatestRequirement != null)
                                {
                                    <span class="status-badge @GetStatusBadgeClass(Model.LatestRequirement.Status)">
                                        @GetStatusText(Model.LatestRequirement.Status)
                                    </span>
                                }
                            </div>
                            @if (Model.LatestRequirement != null)
                            {
                                <p class="font-semibold">@Model.LatestRequirement.Title</p>
                                <p class="text-xs text-muted-foreground">
                                    Prioridad: @TranslatePriority(Model.LatestRequirement.Priority) • @Model.LatestRequirement.CreatedAt.ToString("dd MMM yyyy")
                                </p>
                            }
                            else
                            {
                                <p class="text-gray-500">No hay requerimientos disponibles</p>
                            }
                        </div>
                        <i class="fas fa-chevron-down text-gray-400 transition-transform" id="requirements-icon"></i>
                    </div>
                    <div class="bg-gray-50 px-6 py-3 grid transition-all hidden" id="requirements-content">
                        <div class="overflow-hidden">
                            <div class="space-y-3">
                                <h4 class="text-sm font-medium mb-2">Últimos 5 requerimientos</h4>
                                @if (Model.RecentRequirements != null && Model.RecentRequirements.Any())
                                {
                                    <div class="space-y-2">
                                        @foreach (var requirement in Model.RecentRequirements)
                                        {
                                            <div class="bg-white p-3 rounded border text-sm">
                                                <div class="flex justify-between">
                                                    <span class="font-medium">@requirement.Title</span>
                                                    <span class="priority-badge @GetPriorityBadgeClass(requirement.Priority)">
                                                        @TranslatePriority(requirement.Priority)
                                                    </span>
                                                </div>
                                                <p class="text-gray-600">
                                                    @(requirement.Description != null && requirement.Description.Length > 60
                                                        ? $"{requirement.Description.Substring(0, 60)}..."
                                                        : requirement.Description)
                                                </p>
                                                <div class="flex justify-end mt-2">
                                                    <span class="status-badge @GetStatusBadgeClass(requirement.Status)">
                                                        @GetStatusText(requirement.Status)
                                                    </span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-sm text-gray-500">No hay requerimientos recientes</p>
                                }
                                <div class="mt-3 text-right">
                                    <a href="/Requirements" class="text-sm text-blue-600 hover:underline inline-flex items-center">
                                        Ver todos los requerimientos <i class="fas fa-arrow-right ml-1 text-xs"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="px-6 py-4 bg-gray-50 border-t">
                <div class="flex justify-end space-x-2">
                    <a href="/Analytics" class="btn btn-primary btn-sm">
                        <i class="fas fa-chart-bar mr-2"></i>
                        Ver Análisis
                    </a>
                    <a href="/Surveys" class="btn btn-outline btn-sm">
                        Ver Todas las Encuestas
                        <i class="fas fa-arrow-right ml-2"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleSection(section) {
            const content = document.getElementById(section + '-content');
            const icon = document.getElementById(section + '-icon');
            
            if (content.classList.contains('hidden')) {
                content.classList.remove('hidden');
                content.classList.add('grid-rows-[1fr]', 'opacity-100');
                icon.classList.add('transform', 'rotate-180');
            } else {
                content.classList.add('hidden');
                content.classList.remove('grid-rows-[1fr]', 'opacity-100');
                icon.classList.remove('transform', 'rotate-180');
            }
        }
    </script>
}

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" or "new" => "bg-blue-50 text-blue-700 border-blue-200",
            "in-progress" or "reviewed" => "bg-amber-50 text-amber-700 border-amber-200",
            "closed" or "implemented" => "bg-green-50 text-green-700 border-green-200",
            "rejected" => "bg-red-50 text-red-700 border-red-200",
            _ => "bg-gray-50 text-gray-700 border-gray-200",
        };
    }

    public string GetStatusText(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "Pendiente",
            "new" => "Nuevo",
            "in-progress" => "En curso",
            "reviewed" => "Revisado",
            "closed" => "Cerrado",
            "implemented" => "Implementado",
            "rejected" => "Rechazado",
            _ => status,
        };
    }

    public string GetPriorityBadgeClass(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "bg-red-50 text-red-700 border-red-200",
            "medium" => "bg-amber-50 text-amber-700 border-amber-200",
            "low" => "bg-green-50 text-green-700 border-green-200",
            _ => "bg-gray-50 text-gray-700 border-gray-200",
        };
    }

    public string TranslatePriority(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "Alta",
            "medium" => "Media",
            "low" => "Baja",
            _ => priority,
        };
    }
}
