
@model RequirementsViewModel

<div class="card">
    <div class="card-header">
        <h2 class="card-title flex items-center justify-between">
            <span>Requirements List</span>
            <div class="flex items-center space-x-2">
                <span class="text-sm text-muted-foreground">
                    @Model.Requirements.Count requirement(s)
                </span>
            </div>
        </h2>
        
        <div class="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4 mt-4">
            <div class="relative flex-1">
                <i class="icon-search absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground"></i>
                <input 
                    type="search" 
                    id="searchInput"
                    placeholder="Search requirements..." 
                    class="form-input pl-8" 
                    onkeyup="filterRequirements()"
                />
            </div>
            
            <select id="statusFilter" class="form-select w-[160px]" onchange="filterRequirements()">
                <option value="">All statuses</option>
                <option value="proposed">Proposed</option>
                <option value="in-progress">In Progress</option>
                <option value="implemented">Implemented</option>
                <option value="rejected">Rejected</option>
            </select>
            
            <select id="priorityFilter" class="form-select w-[160px]" onchange="filterRequirements()">
                <option value="">All priorities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
            </select>
            
            @if (Model.Categories != null && Model.Categories.Any())
            {
                <select id="categoryFilter" class="form-select w-[160px]" onchange="filterRequirements()">
                    <option value="">All categories</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.ToLower()">@category</option>
                    }
                </select>
            }
        </div>
    </div>
    
    <div class="card-content">
        <div id="requirementsList" class="space-y-4">
            @if (!Model.Requirements.Any())
            {
                <div class="flex flex-col items-center justify-center py-8 text-center">
                    <div class="rounded-full bg-muted p-3 mb-3">
                        <i class="icon-search h-6 w-6 text-muted-foreground"></i>
                    </div>
                    <h3 class="text-lg font-semibold">No requirements found</h3>
                    <p class="text-sm text-muted-foreground">
                        Try adjusting your search or filter criteria.
                    </p>
                </div>
            }
            else
            {
                @foreach (var req in Model.Requirements)
                {
                    <div class="requirement-item border rounded-lg p-4 hover:bg-muted/50 transition-colors" 
                         data-status="@req.Status?.ToLower()" 
                         data-priority="@req.Priority?.ToLower()" 
                         data-category="@req.Category?.ToLower()">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                <h3 class="font-medium text-lg mb-1">@req.Title</h3>
                                <p class="text-muted-foreground text-sm mb-3">@req.Description</p>
                                
                                <div class="flex items-center space-x-2 text-xs text-muted-foreground mb-2">
                                    @if (!string.IsNullOrEmpty(req.ProjectArea))
                                    {
                                        <span>Area: @req.ProjectArea</span>
                                        <span>•</span>
                                    }
                                    <span>By: @(req.IsAnonymous ? "Anonymous" : req.CustomerName)</span>
                                    <span>•</span>
                                    <span>Created: @req.CreatedAt.ToShortDateString()</span>
                                </div>
                                
                                <div class="flex flex-wrap gap-2">
                                    @{
                                        var statusClass = req.Status?.ToLower() switch
                                        {
                                            "proposed" => "bg-blue-100 text-blue-800",
                                            "in-progress" => "bg-yellow-100 text-yellow-800",
                                            "implemented" => "bg-green-100 text-green-800",
                                            "rejected" => "bg-red-100 text-red-800",
                                            _ => "bg-gray-100 text-gray-800"
                                        };
                                        
                                        var priorityClass = req.Priority?.ToLower() switch
                                        {
                                            "critical" => "bg-red-100 text-red-800",
                                            "high" => "bg-orange-100 text-orange-800",
                                            "medium" => "bg-blue-100 text-blue-800",
                                            "low" => "bg-green-100 text-green-800",
                                            _ => "bg-gray-100 text-gray-800"
                                        };
                                    }
                                    
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @statusClass">
                                        @req.Status
                                    </span>
                                    
                                    @if (!string.IsNullOrEmpty(req.Priority))
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @priorityClass">
                                            @req.Priority
                                        </span>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(req.Category))
                                    {
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                            @req.Category
                                        </span>
                                    }
                                </div>
                            </div>
                            
                            @if (req.CompletionPercentage > 0)
                            {
                                <div class="flex flex-col items-end">
                                    <div class="text-xs text-muted-foreground mb-1">
                                        Progress: @req.CompletionPercentage%
                                    </div>
                                    <div class="w-16 h-1.5 bg-muted rounded-full overflow-hidden">
                                        <div class="h-full bg-primary rounded-full" style="width: @(req.CompletionPercentage)%"></div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        @if (User.IsInRole("Admin"))
                        {
                            <div class="mt-4 flex justify-end space-x-2">
                                <a href="@Url.Action("Details", "Requirements", new { id = req.Id })" class="btn btn-outline btn-sm">View Details</a>
                                <button type="button" class="btn btn-primary btn-sm" 
                                        onclick="showUpdateStatusModal('@req.Id', '@req.Status')">
                                    Update Status
                                </button>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Update Status Modal (Hidden by default) -->
<div id="updateStatusModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <h3 class="text-lg font-medium mb-4">Update Requirement Status</h3>
        <form id="updateStatusForm" method="post">
            <input type="hidden" id="requirementId" name="id" />
            
            <div class="mb-4">
                <label for="status" class="block text-sm font-medium mb-1">Status</label>
                <select id="status" name="status" class="form-select w-full">
                    <option value="proposed">Proposed</option>
                    <option value="in-progress">In Progress</option>
                    <option value="implemented">Implemented</option>
                    <option value="rejected">Rejected</option>
                </select>
            </div>
            
            <div class="mb-4">
                <label for="response" class="block text-sm font-medium mb-1">Response</label>
                <textarea id="response" name="response" rows="3" class="form-textarea w-full"></textarea>
            </div>
            
            <div class="mb-4">
                <label for="completionPercentage" class="block text-sm font-medium mb-1">
                    Completion Percentage
                </label>
                <input type="range" id="completionPercentage" name="completionPercentage" 
                       min="0" max="100" step="5" value="0" class="w-full" 
                       oninput="document.getElementById('percentageValue').textContent = this.value + '%'" />
                <div class="text-right text-sm mt-1">
                    <span id="percentageValue">0%</span>
                </div>
            </div>
            
            <div class="flex justify-end space-x-3 mt-6">
                <button type="button" class="btn btn-outline" onclick="closeUpdateStatusModal()">
                    Cancel
                </button>
                <button type="submit" class="btn btn-primary">
                    Update
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    function filterRequirements() {
        const searchValue = document.getElementById('searchInput').value.toLowerCase();
        const statusFilter = document.getElementById('statusFilter').value.toLowerCase();
        const priorityFilter = document.getElementById('priorityFilter').value.toLowerCase();
        const categoryFilter = document.getElementById('categoryFilter')?.value.toLowerCase() || '';
        
        const items = document.querySelectorAll('.requirement-item');
        let visibleCount = 0;
        
        items.forEach(item => {
            const content = item.textContent.toLowerCase();
            const status = item.getAttribute('data-status');
            const priority = item.getAttribute('data-priority');
            const category = item.getAttribute('data-category');
            
            const matchesSearch = content.includes(searchValue);
            const matchesStatus = !statusFilter || status === statusFilter;
            const matchesPriority = !priorityFilter || priority === priorityFilter;
            const matchesCategory = !categoryFilter || category === categoryFilter;
            
            const isVisible = matchesSearch && matchesStatus && matchesPriority && matchesCategory;
            
            item.style.display = isVisible ? '' : 'none';
            if (isVisible) visibleCount++;
        });
        
        // Show/hide no results message
        const noResults = document.querySelector('#requirementsList .flex.flex-col.items-center');
        if (noResults) {
            if (visibleCount === 0) {
                noResults.classList.remove('hidden');
            } else {
                noResults.classList.add('hidden');
            }
        }
    }
    
    function showUpdateStatusModal(id, currentStatus) {
        document.getElementById('requirementId').value = id;
        document.getElementById('status').value = currentStatus.toLowerCase();
        document.getElementById('updateStatusModal').classList.remove('hidden');
    }
    
    function closeUpdateStatusModal() {
        document.getElementById('updateStatusModal').classList.add('hidden');
    }
    
    // Close modal when clicking outside
    document.getElementById('updateStatusModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeUpdateStatusModal();
        }
    });
    
    // Submit form via AJAX
    document.getElementById('updateStatusForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        fetch('@Url.Action("UpdateStatus", "Requirements")', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while updating the status.');
        })
        .finally(() => {
            closeUpdateStatusModal();
        });
    });
</script>
