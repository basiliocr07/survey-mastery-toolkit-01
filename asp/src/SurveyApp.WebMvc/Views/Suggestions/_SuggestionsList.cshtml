
@model List<SurveyApp.Application.DTOs.SuggestionDto>
@{
    var isAdmin = (bool)ViewData["IsAdmin"];
}

<div class="space-y-6">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Customer Suggestions</h3>
            <p class="card-description">
                Browse and filter through all customer feedback and suggestions
            </p>
            
            <div class="flex flex-col md:flex-row gap-4 mt-4">
                <div class="relative flex-grow">
                    <i class="fas fa-search absolute left-3 top-3 h-4 w-4 text-muted-foreground"></i>
                    <input
                        id="searchInput"
                        type="text"
                        placeholder="Search suggestions..."
                        class="form-input pl-10 w-full rounded-md border border-input"
                    />
                </div>
                
                <div class="flex gap-2">
                    <select id="statusFilter" class="form-select w-[140px] rounded-md border border-input">
                        <option value="">All Statuses</option>
                        <option value="new">New</option>
                        <option value="reviewed">In Progress</option>
                        <option value="implemented">Implemented</option>
                        <option value="rejected">Rejected</option>
                    </select>
                    
                    <select id="categoryFilter" class="form-select w-[140px] rounded-md border border-input">
                        <option value="">All Categories</option>
                        @{
                            var categories = Model.Select(s => s.Category).Where(c => !string.IsNullOrEmpty(c)).Distinct().ToList();
                            foreach (var category in categories)
                            {
                                <option value="@category">@category</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        
        <div class="card-content">
            @if (Model.Count == 0)
            {
                <div class="text-center py-8 text-muted-foreground">
                    No suggestions found matching your filters
                </div>
            }
            else
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead>
                            <tr>
                                <th class="text-left pb-4">Suggestion</th>
                                <th class="text-left pb-4">Customer</th>
                                <th class="text-left pb-4">Date</th>
                                <th class="text-left pb-4">Category</th>
                                <th class="text-left pb-4">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var suggestion in Model)
                            {
                                <tr class="suggestion-item" 
                                    data-status="@suggestion.Status.ToLower()" 
                                    data-category="@suggestion.Category"
                                    data-content="@suggestion.Content.ToLower()">
                                    <td class="max-w-md py-4 border-t">
                                        @suggestion.Content
                                    </td>
                                    <td class="py-4 border-t">
                                        @(suggestion.IsAnonymous ? "Anonymous" : suggestion.CustomerName)
                                    </td>
                                    <td class="whitespace-nowrap py-4 border-t">
                                        <div class="flex items-center">
                                            <i class="fas fa-calendar mr-2 h-4 w-4 text-muted-foreground"></i>
                                            @suggestion.CreatedAt.ToString("MMM d, yyyy")
                                        </div>
                                    </td>
                                    <td class="py-4 border-t">
                                        @if (!string.IsNullOrEmpty(suggestion.Category))
                                        {
                                            <span class="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold">
                                                @suggestion.Category
                                            </span>
                                        }
                                    </td>
                                    <td class="py-4 border-t">
                                        @{
                                            string statusColor = "";
                                            switch (suggestion.Status.ToLower())
                                            {
                                                case "new":
                                                    statusColor = "bg-blue-500";
                                                    break;
                                                case "reviewed":
                                                    statusColor = "bg-yellow-500";
                                                    break;
                                                case "implemented":
                                                    statusColor = "bg-green-500";
                                                    break;
                                                case "rejected":
                                                    statusColor = "bg-red-500";
                                                    break;
                                                default:
                                                    statusColor = "bg-gray-500";
                                                    break;
                                            }
                                        }
                                        <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold text-white @statusColor">
                                            @(char.ToUpper(suggestion.Status[0]) + suggestion.Status.Substring(1))
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        const categoryFilter = document.getElementById('categoryFilter');
        const suggestionItems = document.querySelectorAll('.suggestion-item');
        
        function filterSuggestions() {
            const searchTerm = searchInput.value.toLowerCase();
            const statusValue = statusFilter.value;
            const categoryValue = categoryFilter.value;
            
            suggestionItems.forEach(item => {
                const matchesSearch = !searchTerm || item.dataset.content.includes(searchTerm);
                const matchesStatus = !statusValue || item.dataset.status === statusValue;
                const matchesCategory = !categoryValue || item.dataset.category === categoryValue;
                
                if (matchesSearch && matchesStatus && matchesCategory) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        }
        
        searchInput.addEventListener('input', filterSuggestions);
        statusFilter.addEventListener('change', filterSuggestions);
        categoryFilter.addEventListener('change', filterSuggestions);
    });
</script>
